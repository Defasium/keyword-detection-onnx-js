{"version":3,"sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/lib/backend-impl.ts","webpack://ort/../common/lib/backend.ts","webpack://ort/../common/lib/env-impl.ts","webpack://ort/../common/lib/env.ts","webpack://ort/../common/lib/inference-session-impl.ts","webpack://ort/../common/lib/inference-session.ts","webpack://ort/../common/lib/tensor-impl.ts","webpack://ort/../common/lib/tensor.ts","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/clip.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dropout.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/elu.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/leaky-relu.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/ops/binary-op.ts","webpack://ort/./lib/onnxjs/ops/clip.ts","webpack://ort/./lib/onnxjs/ops/concat.ts","webpack://ort/./lib/onnxjs/ops/conv.ts","webpack://ort/./lib/onnxjs/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/ops/dropout.ts","webpack://ort/./lib/onnxjs/ops/elu.ts","webpack://ort/./lib/onnxjs/ops/flatten.ts","webpack://ort/./lib/onnxjs/ops/gather.ts","webpack://ort/./lib/onnxjs/ops/gemm.ts","webpack://ort/./lib/onnxjs/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/ops/leaky-relu.ts","webpack://ort/./lib/onnxjs/ops/matmul.ts","webpack://ort/./lib/onnxjs/ops/pad.ts","webpack://ort/./lib/onnxjs/ops/pool.ts","webpack://ort/./lib/onnxjs/ops/reduce-op.ts","webpack://ort/./lib/onnxjs/ops/reshape.ts","webpack://ort/./lib/onnxjs/ops/slice.ts","webpack://ort/./lib/onnxjs/ops/softmax.ts","webpack://ort/./lib/onnxjs/ops/split.ts","webpack://ort/./lib/onnxjs/ops/squeeze.ts","webpack://ort/./lib/onnxjs/ops/sum.ts","webpack://ort/./lib/onnxjs/ops/tile.ts","webpack://ort/./lib/onnxjs/ops/transpose.ts","webpack://ort/./lib/onnxjs/ops/unary-op.ts","webpack://ort/./lib/onnxjs/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/ops/upsample.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","_scriptDir","e","document","currentScript","src","t","D","buffer","I","Z","F","r","L","n","P","a","H","o","W","i","u","s","ready","Promise","c","f","hasOwnProperty","l","d","m","p","h","g","_","window","importScripts","process","versions","node","E","ENVIRONMENT_IS_PTHREAD","v","y","T","O","w","S","A","locateFile","b","__dirname","normalize","readFileSync","Uint8Array","B","argv","length","replace","slice","on","ln","_e","exit","inspect","console","error","Worker","read","readbuffer","scriptArgs","arguments","quit","print","log","warn","printErr","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","C","x","k","R","bind","N","M","shown","thisProgram","Atomics","load","store","compareExchange","wasmBinary","noExitRuntime","WebAssembly","U","G","String","fromCharCode","Y","j","charCodeAt","z","q","V","Wr","X","set","Q","K","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","J","$","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","SharedArrayBuffer","Error","byteLength","ee","te","re","ne","ae","oe","preRun","fe","shift","De","ie","ue","se","mr","Le","runExitHandlers","ce","postRun","le","unshift","push","func","Hr","de","me","pe","he","monitorRunDependencies","ge","clearInterval","onAbort","stack","RuntimeError","Ee","prototype","startsWith","preloadedImages","preloadedAudios","ve","ye","Te","Oe","we","Se","Ae","fetch","credentials","then","ok","arrayBuffer","catch","resolve","be","Pr","asm","Aa","instance","instantiate","instantiateWasm","instantiateStreaming","Ce","673802","674054","setTimeout","Jr","xe","initRuntime","arg","get","ke","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EAGAIN","EWOULDBLOCK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","ENOMSG","EIDRM","ECHRNG","EL2NSYNC","EL3HLT","EL3RST","ELNRNG","EUNATCH","ENOCSI","EL2HLT","EDEADLK","ENOLCK","EBADE","EBADR","EXFULL","ENOANO","EBADRQC","EBADSLT","EDEADLOCK","EBFONT","ENOSTR","ENODATA","ETIME","ENOSR","ENONET","ENOPKG","EREMOTE","ENOLINK","EADV","ESRMNT","ECOMM","EPROTO","EMULTIHOP","EDOTDOT","EBADMSG","ENOTUNIQ","EBADFD","EREMCHG","ELIBACC","ELIBBAD","ELIBSCN","ELIBMAX","ELIBEXEC","ENOSYS","ENOTEMPTY","ENAMETOOLONG","ELOOP","EOPNOTSUPP","EPFNOSUPPORT","ECONNRESET","ENOBUFS","EAFNOSUPPORT","EPROTOTYPE","ENOTSOCK","ENOPROTOOPT","ESHUTDOWN","ECONNREFUSED","EADDRINUSE","ECONNABORTED","ENETUNREACH","ENETDOWN","ETIMEDOUT","EHOSTDOWN","EHOSTUNREACH","EINPROGRESS","EALREADY","EDESTADDRREQ","EMSGSIZE","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EADDRNOTAVAIL","ENETRESET","EISCONN","ENOTCONN","ETOOMANYREFS","EUSERS","EDQUOT","ESTALE","ENOTSUP","ENOMEDIUM","EILSEQ","EOVERFLOW","ECANCELED","ENOTRECOVERABLE","EOWNERDEAD","ESTRPIPE","Re","fn","notify","Ne","pthreads","worker","terminate","freeThreadData","runningWorkers","splice","pthread","Me","postMessage","cmd","Ie","returnWorkerToPool","_emscripten_futex_wake","Fe","unusedWorkers","initMainThreadBlock","rn","Kr","initWorker","threadExitHandlers","setThreadStatus","pop","Gr","Xr","threadExit","threadCancel","terminateAllThreads","threadInfoStruct","Br","allocatedOwnStack","stackBase","runWithoutMainThreadQueuedCalls","cn","receiveObjectTransfer","loadWasmModuleToWorker","onmessage","data","currentProxiedOperationCallerThread","targetThread","transferList","Qr","yr","thread","loaded","runPthread","threadId","text","alert","mn","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","allocateUnusedWorker","getNewWorker","busySpinWait","now","Pe","un","an","He","We","Ue","establishStackSpace","getNoExitRuntime","invokeEntryPoint","hrtime","__performance_now_clock_drift","dateNow","Be","Ge","Ur","Ye","Date","je","ze","DESTRUCTOR_OFFSET","REFCOUNT_OFFSET","TYPE_OFFSET","CAUGHT_OFFSET","RETHROWN_OFFSET","SIZE","qe","Ve","kt","Xe","Qe","Ke","Ze","this","excPtr","ptr","set_type","get_type","set_destructor","get_destructor","set_refcount","set_caught","get_caught","set_rethrown","get_rethrown","init","add_ref","add","release_ref","sub","Je","$e","mappings","buffers","printChar","varargs","getStr","get64","et","doAccess","tt","rt","nt","at","ot","it","ut","doMkdir","st","sn","jr","malloc","len","allocated","fd","prot","flags","offset","ct","ft","lt","dt","mt","doReadlink","pt","ht","gt","_t","Et","vt","yt","Tt","Ot","wt","St","Mt","apply","At","bt","Ct","exchange","wait","xt","copyWithin","Dt","navigator","hardwareConcurrency","nn","en","Rt","Nt","It","Ir","Ft","Lt","grow","Pt","Math","min","max","Ht","inEventHandler","removeAllEventListeners","eventHandlers","_removeHandler","deferredCalls","registerRemoveEventListeners","removeEventListenersRegistered","deferCall","targetFunction","argsList","precedence","sort","removeDeferredCalls","canPerformEventHandlerRequests","currentEventHandler","allowsDeferredCalls","runDeferredCalls","removeAllHandlersOnTarget","eventTypeString","removeEventListener","eventListenerFunc","useCapture","registerOrRemoveHandler","handlerFunc","callbackfunc","addEventListener","queueEventHandlerOnThread_iiii","tn","getTargetThreadForEventCallback","getNodeNameForTarget","screen","nodeName","fullscreenEnabled","webkitFullscreenEnabled","Wt","Ut","Bt","Gt","Yt","jt","querySelector","zt","qt","canvasSharedPtr","offscreenCanvas","controlTransferredOffscreen","GLctxObject","GLctx","getParameter","width","height","viewport","Vt","Xt","Qt","Kt","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","Zt","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","Jt","drawBuffers","drawBuffersWEBGL","$t","multiDrawWebgl","er","counter","programs","framebuffers","renderbuffers","textures","uniforms","shaders","vaos","contexts","offscreenCanvases","timerQueriesEXT","programInfos","stringCache","unpackAlignment","recordError","lastError","getNewId","getSource","createContext","getContext","registerContext","handle","attributes","version","majorVersion","canvas","enableExtensionsByDefault","initExtensions","makeContextCurrent","currentContext","ctx","Cr","deleteContext","initExtensionsDone","disjointTimerQueryExt","getSupportedExtensions","forEach","populateUniformTable","maxUniformLength","maxAttributeLength","maxUniformBlockNameLength","getProgramParameter","getActiveUniform","name","getUniformLocation","size","tr","rr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","minorVersion","explicitSwapControl","proxyContextToMainThread","renderViaOffscreenBackBuffer","nr","ar","or","ir","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","ur","sr","cr","fr","lr","getStreamFromFD","doReadv","dr","_fflush","pr","hr","gr","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getTime","GMTString","_r","called","getFullYear","getTimezoneOffset","Vr","qr","Number","zr","toTimeString","match","Er","getSeconds","getMinutes","getHours","getDate","getMonth","getDay","vr","setTime","pthread_ptr","stackSize","detached","Yr","start_routine","startRoutine","time","Tr","$r","Or","wr","Zr","Sr","Ar","br","xr","Dr","kr","setDate","setMonth","setFullYear","Rr","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","tm_zone","RegExp","toString","substring","ceil","abs","Fr","Nr","Mr","Array","Lr","ca","ba","aa","ea","ga","fa","da","___wasm_call_ctors","ha","_OrtInit","ia","_OrtCreateSessionOptions","ja","_OrtAddSessionConfigEntry","ka","_OrtReleaseSessionOptions","la","_OrtCreateSession","ma","_OrtReleaseSession","na","_OrtGetInputCount","oa","_OrtGetOutputCount","pa","_OrtGetInputName","qa","_OrtGetOutputName","ra","_OrtFree","sa","_OrtCreateTensor","ta","_OrtGetTensorData","ua","_OrtReleaseTensor","va","_OrtCreateRunOptions","wa","_OrtAddRunConfigEntry","xa","_OrtReleaseRunOptions","ya","_OrtRun","za","_malloc","Ba","___errno_location","Ca","_free","Da","_pthread_self","Ea","_emscripten_get_global_libc","Fa","_memset","Ga","__get_tzname","Ha","__get_daylight","Ia","__get_timezone","Ja","___em_js__initPthreadsJS","Ka","___pthread_tsd_run_dtors","La","_emscripten_main_thread_process_queued_calls","Ma","_emscripten_current_thread_process_queued_calls","Na","_emscripten_register_main_browser_thread_id","Oa","_emscripten_main_browser_thread_id","Pa","__emscripten_do_dispatch_to_thread","Qa","_emscripten_sync_run_in_main_thread_4","Ra","_emscripten_run_in_main_runtime_thread_js","Sa","__emscripten_call_on_thread","Ta","_emscripten_tls_init","Ua","__emscripten_thread_init","Va","stackSave","Wa","stackRestore","Xa","stackAlloc","Ya","_emscripten_stack_set_limits","Za","_memalign","_a","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","dn","setStatus","calledRun","onRuntimeInitialized","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","PThread","ExitStatus","run","preInit","ortWasm","undefined","readyPromiseResolve","readyPromiseReject","Module","reject","key","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","read_","readAsync","readBinary","nodeFS","nodePath","scriptDirectory","path","binary","ret","assert","ex","abort","url","xhr","out","err","ABORT","condition","UTF8Decoder","TextDecoder","UTF8ArrayToString","heap","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","u1","u2","ch","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","outPtr","allocateUTF8","writeArrayToMemory","array","writeAsciiToMemory","dontAddNull","alignUp","multiple","updateGlobalBufferAndViews","buf","wasmTable","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","addOnPreRun","callRuntimeCallbacks","preMain","addOnPostRun","cb","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","callback","what","hasPrefix","prefix","dataURIPrefix","isDataURI","fileURIPrefix","isFileURI","wasmBinaryFile","getBinary","file","getBinaryPromise","createWasm","info","asmLibraryArg","receiveInstance","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","reason","callbacks","ExceptionInfoAttrs","___cxa_allocate_exception","_atexit","___cxa_atexit","a0","a1","___cxa_thread_atexit","ExceptionInfo","type","destructor","refcount","caught","rethrown","value","prev","___cxa_throw","_emscripten_get_now","SYSCALLS","stream","curr","low","high","___sys_access","amode","setErrNo","___sys_fcntl64","___sys_fstat64","___sys_getdents64","dirp","count","___sys_getpid","___sys_ioctl","op","___sys_lstat64","___sys_mkdir","mode","syscallMmap2","addr","off","___sys_mmap2","syscallMunmap","___sys_munmap","___sys_open","___sys_readlink","bufsize","___sys_rmdir","___sys_stat64","___sys_unlink","_abort","_emscripten_get_now_is_monotonic","_clock_gettime","clk_id","tp","_difftime","time1","time0","_dlclose","_dlerror","_dlopen","flag","_dlsym","symbol","_emscripten_memcpy_big","dest","num","_emscripten_get_heap_size","emscripten_realloc_buffer","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","_emscripten_thread_sleep","msecs","start","ENV","getExecutableName","getEnvStrings","env","_environ_get","__environ","environ_buf","bufSize","string","_environ_sizes_get","penviron_count","penviron_buf_size","_fd_close","_fd_fdstat_get","pbuf","_fd_read","iov","iovcnt","pnum","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","_gettimeofday","_gmtime_r","tmPtr","date","yday","_tzset","currentYear","winter","summer","winterOffset","summerOffset","stdTimezoneOffset","winterName","extractZone","summerName","winterNamePtr","summerNamePtr","_localtime_r","dst","zonePtr","_mktime","guessedOffset","dstOffset","nonDstOffset","trueOffset","_pthread_create","_pthread_join","__isLeapYear","year","__arraySum","index","sum","__MONTH_DAYS_LEAP","__MONTH_DAYS_REGULAR","__addDays","days","newDate","leap","currentMonth","daysInCurrentMonth","_strftime","maxsize","format","tm","pattern","EXPANSION_RULES_1","rule","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","sgn","compare","getFirstWeekStartDate","janFourth","getWeekBasedYear","thisDate","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","twelveHour","janFirst","firstSunday","endDate","februaryFirstUntilEndMonth","daysDifference","firstMonday","ahead","bytes","intArrayFromString","_strftime_l","_sysconf","stringy","u8array","numBytesWritten","args","doRun","runCaller","params","pending","base64","charAt","b64","s64","encode","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","evt","listeners","emit","f32","f8b","writeFloat_f32_cpy","val","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","Object","keys","alloc","MAX","slab","call","utf8","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","random","isEmpty","toJSON","wasm","Instance","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","registerBackend","backend","priority","createSessionHandler","currentBackend","resolveBackend","backendHints","backendNames","errors","backendName","backendInfo","initialized","initializing","aborted","map","webgl","logLevelInternal","EnvImpl","handler","feeds","arg1","arg2","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","getOwnPropertyNames","inputNames","results","returnValue","arg0","arg3","filePathOrUint8Array","ArrayBuffer","byteOffset","isSafeInteger","eps","executionProviders","InferenceSession","startProfiling","endProfiling","isBigInt64ArrayAvailable","BigInt64Array","isBigUint64ArrayAvailable","BigUint64Array","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","typedArrayConstructor","firstElementType","mappedType","calculateSize","reshape","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","numThreads","numCpuLogicalCores","cpus","initializeWebAssembly","promisify","readFile","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","ortFbs","onnxruntime","experimental","fbs","_attributes","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","initialize","dispose","WebGLBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","programInfo","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","samplers","samplerName","inputLayout","inputLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","split","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","pack2unpackMap","unpack2packMap","inputs","artifact","programManager","getArtifact","createProgramInfo","setArtifact","runData","createRunData","runProgram","outputTextureData","tensor","checkAndUpdateTextureForm","inputTextureDatas","expectPackedInputs","unpack","expectPackedOutputs","getOrCreateTextureData","td","getTextureData","dataId","createTextureLayoutFromShape","unpackedTextureLayout","getOrCreateTextureLayout","unpackedTextureData","createTextureData","numberData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","texture","textureManager","createTextureFromLayout","createTextureDataFromTexture","createSharedTextureData","tensorId","textureData","_id","readTexture","setTextureData","isInitializer","isTextureLayoutCached","channels","reverseWH","getPackedShape","prefs","layoutStrategy","computeTextureWH","texWidth","texHeight","inferredDims","computeStrides","reversedWH","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","cachedId","packOpCache","WebGLPack","unpackOpCache","WebGLUnpack","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","WebGLUnaryOp","NUMBER_TYPES","glslAbs","FLOAT_TYPES","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","WebGLDepthToSpace","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","WebGLReshape","WebGLResizePacked","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUpsample","WebGLUnsqueeze","glslXor","inferenceHandler","outputShape","scale","epsilon","inputTDs","outputTD","uniformData","BatchNormalization","typeConstraint","glslFunc","resultType","isBroadcast","areEqual","usePackedTexture","ouputLayout","calcShape","aRank","bRank","aBcast","bBcast","BinaryOp","ValueBased","glslBuiltinBinary","Clip","inputShape","axis","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","allGlChannels","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","channelIdx","Concat","WebGLPackedConcat","unpackedImpl","WebGLUnpackedConcat","packedImpl","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","sizeInConcatAxis","previousSum","numberOfTensors","tensorRank","codeLines","arrayRank","kernelReshape","WebGLReshapePacked","matmul","WebGLMatMulPacked","outputReshape","xshape","kshape","kernelShape","PoolConvUtil","adjustPadsBasedOnAutoPad","dilations","pads","autoPad","group","calcOutputShape","im2col","WebGLIm2ColPacked","activation","artifacts","runDataIm2col","im2colOutput","runDataKernelReshape","kernelReshaped","hasBias","runDataMatmul","matmulOutput","outputShapeTensor","runDataOutputReshape","Conv","WebGLConvPacked","unpackedGroupedConvImpl","WebGLUnpackedGroupedConv","unpackedConvImpl","WebGLUnpackedConv","packedConvImpl","packMode","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","concat","processBias","xShape","wShape","outputChannelsPerGroup","getActicationSnippet","activationFunction","applyActivation","readSize","blockSize","createProgramInfoArray","runDataArray","createRunDataArray","wDims","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","kernel","numFeatureMaps","oldRowSize","newRowSize","oldOffset","preferredBatchSize","calcBlockSize","transposePerm","firstReshapeShape","blocksize","blocksizeSqr","firstReshapedTensor","transposeProgramInfo","transposeArtifact","runDataTranspose","transposeOutput","getOutShape","inputDepth","inputHeight","inputWidth","DepthToSpace","testMode","_handler","_inputs","_programInfo","Dropout","toExponential","Elu","outputDims","flattenShape","Flatten","activationName","indexDataShape","normalizeAxis","indexCopyOps","Gather","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","oShape","line","beta","Gemm","convOutputShape","wshape","im2colShape","kernelSize","unrolled","row","col","createGetBiasMethod","bias","numChannels","ImageScaler","createProgramInfos","runDatas","createRunDatas","checkInputTypes","createMeanAndVarianceProgramInfo","xLayout","xDims","channelSize","outputUnpackedShape","createComputOutputProgramInfo","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","inputTD","scaleTD","bTD","InstanceNormalization","LeakyRelu","sharedDimIndex","coordsDataType","getA","getB","MatMul","WebGLUnpackedMatMul","arank","brank","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","getVecChannels","padShape","alayout","getPadFunction","Pad","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","countIncludePad","GlobalAveragePool","AveragePool","isGlobalOperator","adjustPoolAttributes","computePoolOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","GlobalMaxPool","MaxPool","op1","startVal","inputDims","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","arrayName","iRank","idxCopy","axes","normalizeAxes","ops","getOps","keepDims","ReduceBase","WebGLGenericReduce","idxZero","needSqueezeInputData","originInputShape","inputShape3D","processDims3D","originalInputLayout","calculateReshapedDims","integerData","squeezedOutputShape","mainLoop","outputCoords","getFlattenedIndexFrom3D","originalInputTD","squeezedInputLayout","Reshape","batchDims","batch","reshapedDims","packedShape","newTextureLayout","prepareInputs","scales","roi","extrapolationEnabled","extrapolationValue","cubicCoefficientA","excludeOutside","coordinateTransformMode","every","outputHeight","outputWidth","scalesHeight","scalesWidth","getSourceFracIndex","createResizeProgramInfo","useExtrapolation","Upsample","starts","ends","Slice","some","SliceV10","ind","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","sizeToDimension","sizeFromDimension","computeMaxProgramInfo","computeScaleProgramInfo","Softmax","getProgramCount","rundata","SplitUtil","splitShape","numOutputs","Split","Squeeze","sumLine","Sum","tileOps","Tile","getOutputShape","inputShapes","perm","getAdjustedPerm","sortBasedOnPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","Transpose","encoder","getEncoder","allocateTexture","UnaryOp","glslBuiltinUnary","inputTexture","isScalar","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","Unsqueeze","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","resolveOperator","internalFormat","R32F","RED","textureType","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","wsize","hsize","totalSize","sqrt","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","ax","isInt","dimsToSkip","config","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","updateTexture","toTextureData","toTensorData","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","execNodeFn","checkInputs","outputList","downstreamNodes","to","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","ProtoUtil","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","tensorDataTypeFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","fill","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","fuseConvActivationNodes","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","logInternal","toISOString","previousConfig","logLevel","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","flush","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","momentum","spatial","mean","var_","inputType","inputDimensionality","supportedModes","ratio","isOptionalC","ceilMode","PoolBase","storageOrder","opset","_node","isResize","scalesValidataion","needRoiInput","nearestMode","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","parseRoiData","outputSizes","scalesTensor","parseScalesData","sizesTensor","parseScalesDataFromOutputSize","computeOutputShape","yDims","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","versionSelector","opConstructor","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","getData","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","dilation","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","seen","entries","allocWasmString","allocs","getInstance","dataLength","dataOffset","setRunOptions","runOptionsHandle","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","errorCode","getLogLevel","modelDataOffset","sessionOptionsHandle","setSessionOptions","sessionHandle","inputCount","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","inputArray","inputIndices","kvp","inputValues","inputDataOffsets","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","typedArray","sessionOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","timeout","useThreads","MessageChannel","port1","validate","isMultiThreadSupported","isTimeout","tasks","Blob","scriptSourceCode","fileName","URL","createObjectURL","race","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"mappings":"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AAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,O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AAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,G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AG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GA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","file":"ort.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return D.buffer!=I&&Z(D.buffer),F}function r(){return D.buffer!=I&&Z(D.buffer),L}function n(){return D.buffer!=I&&Z(D.buffer),P}function a(){return D.buffer!=I&&Z(D.buffer),H}function o(){return D.buffer!=I&&Z(D.buffer),W}var i,u,s=void 0!==(e=e||{})?e:{};s.ready=new Promise((function(e,t){i=e,u=t}));var c,f={};for(c in s)s.hasOwnProperty(c)&&(f[c]=s[c]);var l=[],d=\"./this.program\",m=function(e,t){throw t},p=!1,h=!1,g=!1,_=!1;p=\"object\"==typeof window,h=\"function\"==typeof importScripts,g=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,_=!p&&!g&&!h;var E=s.ENVIRONMENT_IS_PTHREAD||!1;E&&(I=s.buffer);var v,y,T,O,w,S=\"\";function A(e){return s.locateFile?s.locateFile(e,S):S+e}if(g){var b;S=h?require(\"path\").dirname(S)+\"/\":__dirname+\"/\",v=function(e,t){return O||(O=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),O.readFileSync(e,t?null:\"utf8\")},T=function(e){var t=v(e,!0);return t.buffer||(t=new Uint8Array(t)),B(t.buffer),t},process.argv.length>1&&(d=process.argv[1].replace(/\\\\/g,\"/\")),l=process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ln))throw e})),process.on(\"unhandledRejection\",_e),m=function(e){process.exit(e)},s.inspect=function(){return\"[Emscripten Module object]\"};try{b=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=b.Worker}else _?(\"undefined\"!=typeof read&&(v=function(e){return read(e)}),T=function(e){var t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(B(\"object\"==typeof(t=read(e,\"binary\"))),t)},\"undefined\"!=typeof scriptArgs?l=scriptArgs:void 0!==arguments&&(l=arguments),\"function\"==typeof quit&&(m=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||h)&&(h?S=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\"blob:\")?S.substr(0,S.lastIndexOf(\"/\")+1):\"\",g?(v=function(e,t){return O||(O=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),O.readFileSync(e,t?null:\"utf8\")},T=function(e){var t=v(e,!0);return t.buffer||(t=new Uint8Array(t)),B(t.buffer),t}):(v=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},h&&(T=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),y=function(e,t,r){var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));g&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var C,x,D,k,R=s.print||console.log.bind(console),N=s.printErr||console.warn.bind(console);for(c in f)f.hasOwnProperty(c)&&(s[c]=f[c]);function M(e){M.shown||(M.shown={}),M.shown[e]||(M.shown[e]=1,N(e))}f=null,s.arguments&&(l=s.arguments),s.thisProgram&&(d=s.thisProgram),s.quit&&(m=s.quit),Atomics.load,Atomics.store,Atomics.compareExchange,s.wasmBinary&&(C=s.wasmBinary),s.noExitRuntime&&(x=s.noExitRuntime),\"object\"!=typeof WebAssembly&&_e(\"no native wasm support detected\");var I,F,L,P,H,W,U=!1;function B(e,t){e||_e(\"Assertion failed: \"+t)}function G(e,t,r){for(var n=t+r,a=\"\";!(t>=n);){var o=e[t++];if(!o)return a;if(128&o){var i=63&e[t++];if(192!=(224&o)){var u=63&e[t++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[t++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function Y(e,t){return e?G(r(),e,t):\"\"}function j(e,t,r,n){if(!(n>0))return 0;for(var a=r,o=r+n-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(r>=o)break;t[r++]=u}else if(u<=2047){if(r+1>=o)break;t[r++]=192|u>>6,t[r++]=128|63&u}else if(u<=65535){if(r+2>=o)break;t[r++]=224|u>>12,t[r++]=128|u>>6&63,t[r++]=128|63&u}else{if(r+3>=o)break;t[r++]=240|u>>18,t[r++]=128|u>>12&63,t[r++]=128|u>>6&63,t[r++]=128|63&u}}return t[r]=0,r-a}function z(e,t,n){return j(e,r(),t,n)}function q(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++r)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}function V(e){var r=q(e)+1,n=Wr(r);return n&&j(e,t(),n,r),n}function X(e,r){t().set(e,r)}function Q(e,r,n){for(var a=0;a<e.length;++a)t()[r++>>0]=e.charCodeAt(a);n||(t()[r>>0]=0)}function K(e,t){return e%t>0&&(e+=t-e%t),e}function Z(e){I=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=P=new Int32Array(e),s.HEAPU8=L=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=W=new Float64Array(e)}var J,$=s.INITIAL_MEMORY||16777216;if(E)D=s.wasmMemory,I=s.buffer;else if(s.wasmMemory)D=s.wasmMemory;else if(!((D=new WebAssembly.Memory({initial:$/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw N(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),g&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");D&&(I=D.buffer),$=I.byteLength,Z(I);var ee=[],te=[],re=[],ne=[],ae=[];function oe(){if(!E){if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)fe(s.preRun.shift());De(ee)}}function ie(){De(te)}function ue(){E||De(re)}function se(){E||(De(ne),mr(),Le.runExitHandlers())}function ce(){if(!E){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;)le(s.postRun.shift());De(ae)}}function fe(e){ee.unshift(e)}function le(e){ae.unshift(e)}E||te.push({func:function(){Hr()}});var de=0,me=null,pe=null;function he(e){B(!E,\"addRunDependency cannot be used in a pthread worker\"),de++,s.monitorRunDependencies&&s.monitorRunDependencies(de)}function ge(e){if(de--,s.monitorRunDependencies&&s.monitorRunDependencies(de),0==de&&(null!==me&&(clearInterval(me),me=null),pe)){var t=pe;pe=null,t()}}function _e(e){s.onAbort&&s.onAbort(e),E&&console.error(\"Pthread aborting at \"+(new Error).stack),N(e+=\"\"),U=!0,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var t=new WebAssembly.RuntimeError(e);throw u(t),t}function Ee(e,t){return String.prototype.startsWith?e.startsWith(t):0===e.indexOf(t)}s.preloadedImages={},s.preloadedAudios={};var ve=\"data:application/octet-stream;base64,\";function ye(e){return Ee(e,ve)}var Te=\"file://\";function Oe(e){return Ee(e,Te)}var we=\"ort-wasm-threaded.wasm\";function Se(e){try{if(e==we&&C)return new Uint8Array(C);if(T)return T(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){_e(e)}}function Ae(){if(!C&&(p||h)){if(\"function\"==typeof fetch&&!Oe(we))return fetch(we,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+we+\"'\";return e.arrayBuffer()})).catch((function(){return Se(we)}));if(y)return new Promise((function(e,t){y(we,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return Se(we)}))}function be(){var e={a:Pr};function t(e,t){var r=e.exports;s.asm=r,J=s.asm.Aa,k=t,E||ge()}function r(e){t(e.instance,e.module)}function n(t){return Ae().then((function(t){return WebAssembly.instantiate(t,e)})).then(t,(function(e){N(\"failed to asynchronously prepare wasm: \"+e),_e(e)}))}if(E||he(),s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(e){return N(\"Module.instantiateWasm callback failed with error: \"+e),!1}return(C||\"function\"!=typeof WebAssembly.instantiateStreaming||ye(we)||Oe(we)||\"function\"!=typeof fetch?n(r):fetch(we,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(e){return N(\"wasm streaming compile failed: \"+e),N(\"falling back to ArrayBuffer instantiation\"),n(r)}))}))).catch(u),{}}ye(we)||(we=A(we));var Ce={673802:function(){throw\"Canceled!\"},674054:function(e,t){setTimeout((function(){Jr(e,t)}),0)}};function xe(){Le.initRuntime()}function De(e){for(;e.length>0;){var t=e.shift();if(\"function\"!=typeof t){var r=t.func;\"number\"==typeof r?void 0===t.arg?J.get(r)():J.get(r)(t.arg):r(void 0===t.arg?null:t.arg)}else t(s)}}var ke={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};function Re(e,r){if(e<=0||e>t().length||!0&e||r<0)return-28;if(0==r)return 0;r>=2147483647&&(r=1/0);var a=Atomics.load(n(),fn>>2),o=0;if(a==e&&Atomics.compareExchange(n(),fn>>2,a,0)==a&&(o=1,--r<=0))return 1;var i=Atomics.notify(n(),e>>2,r);if(i>=0)return i+o;throw\"Atomics.notify returned an unexpected value \"+i}function Ne(e){if(E)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in killThread!\";n()[e+12>>2]=0;var t=Le.pthreads[e];t.worker.terminate(),Le.freeThreadData(t),Le.runningWorkers.splice(Le.runningWorkers.indexOf(t.worker),1),t.worker.pthread=void 0}function Me(e){if(E)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cancelThread!\";Le.pthreads[e].worker.postMessage({cmd:\"cancel\"})}function Ie(e){if(E)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";n()[e+12>>2]=0;var t=Le.pthreads[e];if(t){var r=t.worker;Le.returnWorkerToPool(r)}}s._emscripten_futex_wake=Re;var Fe,Le={unusedWorkers:[],runningWorkers:[],initMainThreadBlock:function(){},initRuntime:function(){for(var e=Wr(228),t=0;t<57;++t)a()[e/4+t]=0;n()[e+12>>2]=e;var r=e+152;n()[r>>2]=r;var o=Wr(512);for(t=0;t<128;++t)a()[o/4+t]=0;Atomics.store(a(),e+100>>2,o),Atomics.store(a(),e+40>>2,e),rn(e,!h,1),Kr(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],setThreadStatus:function(){},runExitHandlers:function(){for(;Le.threadExitHandlers.length>0;)Le.threadExitHandlers.pop()();E&&Gr()&&Xr()},threadExit:function(e){var t=Gr();t&&(Atomics.store(a(),t+4>>2,e),Atomics.store(a(),t+0>>2,1),Atomics.store(a(),t+56>>2,1),Atomics.store(a(),t+60>>2,0),Le.runExitHandlers(),Re(t+0,2147483647),rn(0,0,0),E&&postMessage({cmd:\"exit\"}))},threadCancel:function(){Le.runExitHandlers();var e=Gr();Atomics.store(a(),e+4>>2,-1),Atomics.store(a(),e+0>>2,1),Re(e+0,2147483647),rn(0,0,0),postMessage({cmd:\"cancelDone\"})},terminateAllThreads:function(){for(var e in Le.pthreads)(n=Le.pthreads[e])&&n.worker&&Le.returnWorkerToPool(n.worker);Le.pthreads={};for(var t=0;t<Le.unusedWorkers.length;++t)(r=Le.unusedWorkers[t]).terminate();for(Le.unusedWorkers=[],t=0;t<Le.runningWorkers.length;++t){var r,n=(r=Le.runningWorkers[t]).pthread;Le.freeThreadData(n),r.terminate()}Le.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var t=n()[e.threadInfoStruct+100>>2];n()[e.threadInfoStruct+100>>2]=0,Br(t),Br(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&Br(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){Le.runWithoutMainThreadQueuedCalls((function(){delete Le.pthreads[e.pthread.threadInfoStruct],Le.unusedWorkers.push(e),Le.runningWorkers.splice(Le.runningWorkers.indexOf(e),1),Le.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){n()[cn>>2]=0;try{e()}finally{n()[cn>>2]=1}},receiveObjectTransfer:function(e){},loadWasmModuleToWorker:function(e,t){e.onmessage=function(r){var n=r.data,o=n.cmd;if(e.pthread&&(Le.currentProxiedOperationCallerThread=e.pthread.threadInfoStruct),n.targetThread&&n.targetThread!=Gr()){var i=Le.pthreads[n.targetThread];return i?i.worker.postMessage(r.data,n.transferList):console.error('Internal error! Worker sent a message \"'+o+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\"),void(Le.currentProxiedOperationCallerThread=void 0)}if(\"processQueuedMainThreadWork\"===o)Qr();else if(\"spawnThread\"===o)yr(r.data);else if(\"cleanupThread\"===o)Ie(n.thread);else if(\"killThread\"===o)Ne(n.thread);else if(\"cancelThread\"===o)Me(n.thread);else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.runPthread&&(e.runPthread(),delete e.runPthread);else if(\"print\"===o)R(\"Thread \"+n.threadId+\": \"+n.text);else if(\"printErr\"===o)N(\"Thread \"+n.threadId+\": \"+n.text);else if(\"alert\"===o)alert(\"Thread \"+n.threadId+\": \"+n.text);else if(\"exit\"===o)e.pthread&&Atomics.load(a(),e.pthread.threadInfoStruct+64>>2)&&Le.returnWorkerToPool(e);else if(\"exitProcess\"===o)try{mn(n.returnCode)}catch(r){if(r instanceof ln)return;throw r}else\"cancelDone\"===o?Le.returnWorkerToPool(e):\"objectTransfer\"===o?Le.receiveObjectTransfer(r.data):\"setimmediate\"===r.data.target?e.postMessage(r.data):N(\"worker sent an unknown command \"+o);Le.currentProxiedOperationCallerThread=void 0},e.onerror=function(e){N(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},g&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(e){}))),e.postMessage({cmd:\"load\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:D,wasmModule:k})},allocateUnusedWorker:function(){var e=A(\"ort-wasm-threaded.worker.js\");Le.unusedWorkers.push(new Worker(e))},getNewWorker:function(){return 0==Le.unusedWorkers.length&&(Le.allocateUnusedWorker(),Le.loadWasmModuleToWorker(Le.unusedWorkers[0])),Le.unusedWorkers.length>0?Le.unusedWorkers.pop():null},busySpinWait:function(e){for(var t=performance.now()+e;performance.now()<t;);}};function Pe(e,t){un(e,t),an(e)}function He(){return x}function We(e,t){return J.get(e)(t)}function Ue(e,t,r,n){_e(\"Assertion failed: \"+Y(e)+\", at: \"+[t?Y(t):\"unknown filename\",r,n?Y(n):\"unknown function\"])}s.establishStackSpace=Pe,s.getNoExitRuntime=He,s.invokeEntryPoint=We,Fe=g?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:E?function(){return performance.now()-s.__performance_now_clock_drift}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Be=!0;function Ge(e){return n()[Ur()>>2]=e,e}function Ye(e,t){var r;if(0===e)r=Date.now();else{if(1!==e&&4!==e||!Be)return Ge(28),-1;r=Fe()}return n()[t>>2]=r/1e3|0,n()[t+4>>2]=r%1e3*1e3*1e3|0,0}function je(e,t){return Ye(e,t)}var ze={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function qe(e){return Wr(e+ze.SIZE)+ze.SIZE}function Ve(e,t){if(E)return kt(1,1,e,t);ne.unshift({func:e,arg:t})}function Xe(e,t){return Ve(e,t)}function Qe(e,t){Le.threadExitHandlers.push((function(){J.get(e)(t)}))}function Ke(e,t){return Qe(e,t)}function Ze(e){this.excPtr=e,this.ptr=e-ze.SIZE,this.set_type=function(e){n()[this.ptr+ze.TYPE_OFFSET>>2]=e},this.get_type=function(){return n()[this.ptr+ze.TYPE_OFFSET>>2]},this.set_destructor=function(e){n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]=e},this.get_destructor=function(){return n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]},this.set_refcount=function(e){n()[this.ptr+ze.REFCOUNT_OFFSET>>2]=e},this.set_caught=function(e){e=e?1:0,t()[this.ptr+ze.CAUGHT_OFFSET>>0]=e},this.get_caught=function(){return 0!=t()[this.ptr+ze.CAUGHT_OFFSET>>0]},this.set_rethrown=function(e){e=e?1:0,t()[this.ptr+ze.RETHROWN_OFFSET>>0]=e},this.get_rethrown=function(){return 0!=t()[this.ptr+ze.RETHROWN_OFFSET>>0]},this.init=function(e,t){this.set_type(e),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)},this.release_ref=function(){return 1===Atomics.sub(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)}}function Je(e,t,r){throw new Ze(e).init(t,r),e}var $e={mappings:{},buffers:[null,[],[]],printChar:function(e,t){var r=$e.buffers[e];0===t||10===t?((1===e?R:N)(G(r,0)),r.length=0):r.push(t)},varargs:void 0,get:function(){return $e.varargs+=4,n()[$e.varargs-4>>2]},getStr:function(e){return Y(e)},get64:function(e,t){return e}};function et(e,t){return E?kt(2,1,e,t):(e=$e.getStr(e),$e.doAccess(e,t))}function tt(e,t,r){return E?kt(3,1,e,t,r):($e.varargs=r,0)}function rt(e,t){if(E)return kt(4,1,e,t)}function nt(e,t,r){if(E)return kt(5,1,e,t,r)}function at(){return 42}function ot(e,t,r){return E?kt(6,1,e,t,r):($e.varargs=r,0)}function it(e,t){if(E)return kt(7,1,e,t)}function ut(e,t){return E?kt(8,1,e,t):(e=$e.getStr(e),$e.doMkdir(e,t))}function st(e,t,r,n,a,o){var i;o<<=12;var u=!1;return 0!=(16&n)&&e%16384!=0?-28:0==(32&n)?-52:(i=sn(16384,t))?(jr(i,0,t),u=!0,$e.mappings[i]={malloc:i,len:t,allocated:u,fd:a,prot:r,flags:n,offset:o},i):-48}function ct(e,t,r,n,a,o){return E?kt(9,1,e,t,r,n,a,o):st(e,t,r,n,a,o)}function ft(e,t){if(-1==(0|e)||0===t)return-28;var r=$e.mappings[e];return r?(t===r.len&&($e.mappings[e]=null,r.allocated&&Br(r.malloc)),0):0}function lt(e,t){return E?kt(10,1,e,t):ft(e,t)}function dt(e,t,r){if(E)return kt(11,1,e,t,r);$e.varargs=r}function mt(e,t,r){return E?kt(12,1,e,t,r):(e=$e.getStr(e),$e.doReadlink(e,t,r))}function pt(e){if(E)return kt(13,1,e)}function ht(e,t){if(E)return kt(14,1,e,t)}function gt(e){if(E)return kt(15,1,e)}function _t(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(E)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{var r=Le.pthreads[e],n=r&&r.worker;if(!n)return;n.postMessage({cmd:\"processThreadQueue\"})}return 1}function Et(){_e()}function vt(e,t){return e-t}function yt(e){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Tt(){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Ot(e,t){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function wt(e,t){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function St(e,t,r){var n=Mt(t,r);return Ce[e].apply(null,n)}function At(){g||h||M(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")}function bt(e,t){}function Ct(e,r,a){if(e<=0||e>t().length||!0&e)return-28;if(p){if(Atomics.load(n(),e>>2)!=r)return-6;var o=performance.now(),i=o+a;for(Atomics.exchange(n(),fn>>2,e);;){if((o=performance.now())>i)return Atomics.exchange(n(),fn>>2,0),-73;if(0==Atomics.exchange(n(),fn>>2,0))break;if(Qr(),Atomics.load(n(),e>>2)!=r)return-6;Atomics.exchange(n(),fn>>2,e)}return 0}var u=Atomics.wait(n(),e>>2,r,a);if(\"timed-out\"===u)return-73;if(\"not-equal\"===u)return-6;if(\"ok\"===u)return 0;throw\"Atomics.wait returned an unexpected value \"+u}function xt(e,t,n){r().copyWithin(e,t,t+n)}function Dt(){return g?require(\"os\").cpus().length:navigator.hardwareConcurrency}function kt(e,t){for(var r=arguments.length-2,n=nn(),a=r,i=on(8*a),u=i>>3,s=0;s<r;s++){var c=arguments[2+s];o()[u+s]=c}var f=en(e,a,i,t);return an(n),f}var Rt=[],Nt=[];function Mt(e,t){var a;for(Nt.length=0,t>>=2;a=r()[e++];){var i=a<105;i&&1&t&&t++,Nt.push(i?o()[t++>>1]:n()[t]),++t}return Nt}function It(e,t,r){Rt.length=t;for(var n=r>>3,a=0;a<t;a++)Rt[a]=o()[n+a];return(e<0?Ce[-e-1]:Ir[e]).apply(null,Rt)}function Ft(){return r().length}function Lt(e){try{return D.grow(e-I.byteLength+65535>>>16),Z(D.buffer),1}catch(e){}}function Pt(e){e>>>=0;var t=Ft();if(e<=t)return!1;var r=2147483648;if(e>r)return!1;for(var n=1;n<=4;n*=2){var a=t*(1+.2/n);if(a=Math.min(a,e+100663296),Lt(Math.min(r,K(Math.max(16777216,e,a),65536))))return!0}return!1}var Ht={inEventHandler:0,removeAllEventListeners:function(){for(var e=Ht.eventHandlers.length-1;e>=0;--e)Ht._removeHandler(e);Ht.eventHandlers=[],Ht.deferredCalls=[]},registerRemoveEventListeners:function(){Ht.removeEventListenersRegistered||(ne.push(Ht.removeAllEventListeners),Ht.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,t,r){function n(e,t){if(e.length!=t.length)return!1;for(var r in e)if(e[r]!=t[r])return!1;return!0}for(var a in Ht.deferredCalls){var o=Ht.deferredCalls[a];if(o.targetFunction==e&&n(o.argsList,r))return}Ht.deferredCalls.push({targetFunction:e,precedence:t,argsList:r}),Ht.deferredCalls.sort((function(e,t){return e.precedence<t.precedence}))},removeDeferredCalls:function(e){for(var t=0;t<Ht.deferredCalls.length;++t)Ht.deferredCalls[t].targetFunction==e&&(Ht.deferredCalls.splice(t,1),--t)},canPerformEventHandlerRequests:function(){return Ht.inEventHandler&&Ht.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Ht.canPerformEventHandlerRequests())for(var e=0;e<Ht.deferredCalls.length;++e){var t=Ht.deferredCalls[e];Ht.deferredCalls.splice(e,1),--e,t.targetFunction.apply(null,t.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,t){for(var r=0;r<Ht.eventHandlers.length;++r)Ht.eventHandlers[r].target!=e||t&&t!=Ht.eventHandlers[r].eventTypeString||Ht._removeHandler(r--)},_removeHandler:function(e){var t=Ht.eventHandlers[e];t.target.removeEventListener(t.eventTypeString,t.eventListenerFunc,t.useCapture),Ht.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var t=function(t){++Ht.inEventHandler,Ht.currentEventHandler=e,Ht.runDeferredCalls(),e.handlerFunc(t),Ht.runDeferredCalls(),--Ht.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=t,e.target.addEventListener(e.eventTypeString,t,e.useCapture),Ht.eventHandlers.push(e),Ht.registerRemoveEventListeners();else for(var r=0;r<Ht.eventHandlers.length;++r)Ht.eventHandlers[r].target==e.target&&Ht.eventHandlers[r].eventTypeString==e.eventTypeString&&Ht._removeHandler(r--)},queueEventHandlerOnThread_iiii:function(e,t,r,a,o){var i=nn(),u=on(12);n()[u>>2]=r,n()[u+4>>2]=a,n()[u+8>>2]=o,tn(0,e,637534208,t,a,u),an(i)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return Le.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?\"#window\":e==screen?\"#screen\":e&&e.nodeName?e.nodeName:\"\":\"\"},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function Wt(e){var t=q(e)+1,r=Wr(t);return z(e,r,t),r}function Ut(e,t,r,a){var o=nn(),i=on(12),u=0;t&&(u=Wt(t)),n()[i>>2]=u,n()[i+4>>2]=r,n()[i+8>>2]=a,tn(0,e,657457152,0,u,i),an(o)}function Bt(e,t,r,n){Ut(e,t=t?Y(t):\"\",r,n)}function Gt(e){return e>2?Y(e):e}var Yt=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function jt(e){return e=Gt(e),Yt[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function zt(e){return jt(e)}function qt(e,t,r){var a=zt(e);if(!a)return-4;if(a.canvasSharedPtr&&(n()[a.canvasSharedPtr>>2]=t,n()[a.canvasSharedPtr+4>>2]=r),!a.offscreenCanvas&&a.controlTransferredOffscreen)return a.canvasSharedPtr?(Bt(n()[a.canvasSharedPtr+8>>2],e,t,r),1):-4;a.offscreenCanvas&&(a=a.offscreenCanvas);var o=!1;if(a.GLctxObject&&a.GLctxObject.GLctx){var i=a.GLctxObject.GLctx.getParameter(2978);o=0===i[0]&&0===i[1]&&i[2]===a.width&&i[3]===a.height}return a.width=t,a.height=r,o&&a.GLctxObject.GLctx.viewport(0,0,t,r),0}function Vt(e,t,r){return E?kt(16,1,e,t,r):qt(e,t,r)}function Xt(e,t,r){return zt(e)?qt(e,t,r):Vt(e,t,r)}function Qt(e){}function Kt(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");if(t)return e.vertexAttribDivisor=function(e,r){t.vertexAttribDivisorANGLE(e,r)},e.drawArraysInstanced=function(e,r,n,a){t.drawArraysInstancedANGLE(e,r,n,a)},e.drawElementsInstanced=function(e,r,n,a,o){t.drawElementsInstancedANGLE(e,r,n,a,o)},1}function Zt(e){var t=e.getExtension(\"OES_vertex_array_object\");if(t)return e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)},1}function Jt(e){var t=e.getExtension(\"WEBGL_draw_buffers\");if(t)return e.drawBuffers=function(e,r){t.drawBuffersWEBGL(e,r)},1}function $t(e){return!!(e.multiDrawWebgl=e.getExtension(\"WEBGL_multi_draw\"))}var er={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,recordError:function(e){er.lastError||(er.lastError=e)},getNewId:function(e){for(var t=er.counter++,r=e.length;r<t;r++)e[r]=null;return t},getSource:function(e,t,r,a){for(var o=\"\",i=0;i<t;++i){var u=a?n()[a+4*i>>2]:-1;o+=Y(n()[r+4*i>>2],u<0?void 0:u)}return o},createContext:function(e,t){var r=e.getContext(\"webgl\",t);return r?er.registerContext(r,t):0},registerContext:function(e,t){var r=Wr(8);n()[r+4>>2]=Gr();var a={handle:r,attributes:t,version:t.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=a),er.contexts[r]=a,(void 0===t.enableExtensionsByDefault||t.enableExtensionsByDefault)&&er.initExtensions(a),r},makeContextCurrent:function(e){return er.currentContext=er.contexts[e],s.ctx=Cr=er.currentContext&&er.currentContext.GLctx,!(e&&!Cr)},getContext:function(e){return er.contexts[e]},deleteContext:function(e){er.currentContext===er.contexts[e]&&(er.currentContext=null),\"object\"==typeof Ht&&Ht.removeAllHandlersOnTarget(er.contexts[e].GLctx.canvas),er.contexts[e]&&er.contexts[e].GLctx.canvas&&(er.contexts[e].GLctx.canvas.GLctxObject=void 0),Br(er.contexts[e].handle),er.contexts[e]=null},initExtensions:function(e){if(e||(e=er.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var t=e.GLctx;Kt(t),Zt(t),Jt(t),t.disjointTimerQueryExt=t.getExtension(\"EXT_disjoint_timer_query\"),$t(t),(t.getSupportedExtensions()||[]).forEach((function(e){e.indexOf(\"lose_context\")<0&&e.indexOf(\"debug\")<0&&t.getExtension(e)}))}},populateUniformTable:function(e){for(var t=er.programs[e],r=er.programInfos[e]={uniforms:{},maxUniformLength:0,maxAttributeLength:-1,maxUniformBlockNameLength:-1},n=r.uniforms,a=Cr.getProgramParameter(t,35718),o=0;o<a;++o){var i=Cr.getActiveUniform(t,o),u=i.name;r.maxUniformLength=Math.max(r.maxUniformLength,u.length+1),\"]\"==u.slice(-1)&&(u=u.slice(0,u.lastIndexOf(\"[\")));var s=Cr.getUniformLocation(t,u);if(s){var c=er.getNewId(er.uniforms);n[u]=[i.size,c],er.uniforms[c]=s;for(var f=1;f<i.size;++f){var l=u+\"[\"+f+\"]\";s=Cr.getUniformLocation(t,l),c=er.getNewId(er.uniforms),er.uniforms[c]=s}}}}},tr=[\"default\",\"low-power\",\"high-performance\"];function rr(e,t){var r=t>>2,a=n()[r+6],o={alpha:!!n()[r+0],depth:!!n()[r+1],stencil:!!n()[r+2],antialias:!!n()[r+3],premultipliedAlpha:!!n()[r+4],preserveDrawingBuffer:!!n()[r+5],powerPreference:tr[a],failIfMajorPerformanceCaveat:!!n()[r+7],majorVersion:n()[r+8],minorVersion:n()[r+9],enableExtensionsByDefault:n()[r+10],explicitSwapControl:n()[r+11],proxyContextToMainThread:n()[r+12],renderViaOffscreenBackBuffer:n()[r+13]},i=zt(e);return i?o.explicitSwapControl?0:er.createContext(i,o):0}function nr(e,t){return rr(e,t)}var ar={};function or(){return d||\"./this.program\"}function ir(){if(!ir.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:or()};for(var t in ar)e[t]=ar[t];var r=[];for(var t in e)r.push(t+\"=\"+e[t]);ir.strings=r}return ir.strings}function ur(e,t){if(E)return kt(17,1,e,t);var r=0;return ir().forEach((function(a,o){var i=t+r;n()[e+4*o>>2]=i,Q(a,i),r+=a.length+1})),0}function sr(e,t){if(E)return kt(18,1,e,t);var r=ir();n()[e>>2]=r.length;var a=0;return r.forEach((function(e){a+=e.length+1})),n()[t>>2]=a,0}function cr(e){return E?kt(19,1,e):0}function fr(e,r){if(E)return kt(20,1,e,r);var n=1==e||2==e?2:_e();return t()[r>>0]=n,0}function lr(e,t,r,a){if(E)return kt(21,1,e,t,r,a);var o=$e.getStreamFromFD(e),i=$e.doReadv(o,t,r);return n()[a>>2]=i,0}function dr(e,t,r,n,a){if(E)return kt(22,1,e,t,r,n,a)}function mr(){\"undefined\"!=typeof _fflush&&_fflush(0);var e=$e.buffers;e[1].length&&$e.printChar(1,10),e[2].length&&$e.printChar(2,10)}function pr(e,t,a,o){if(E)return kt(23,1,e,t,a,o);for(var i=0,u=0;u<a;u++){for(var s=n()[t+8*u>>2],c=n()[t+(8*u+4)>>2],f=0;f<c;f++)$e.printChar(e,r()[s+f]);i+=c}return n()[o>>2]=i,0}function hr(e){var t=Date.now();return n()[e>>2]=t/1e3|0,n()[e+4>>2]=t%1e3*1e3|0,0}function gr(e,t){var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getUTCSeconds(),n()[t+4>>2]=r.getUTCMinutes(),n()[t+8>>2]=r.getUTCHours(),n()[t+12>>2]=r.getUTCDate(),n()[t+16>>2]=r.getUTCMonth(),n()[t+20>>2]=r.getUTCFullYear()-1900,n()[t+24>>2]=r.getUTCDay(),n()[t+36>>2]=0,n()[t+32>>2]=0;var a=Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0),o=(r.getTime()-a)/864e5|0;return n()[t+28>>2]=o,gr.GMTString||(gr.GMTString=V(\"GMT\")),n()[t+40>>2]=gr.GMTString,t}function _r(){if(E)return kt(24,1);if(!_r.called){_r.called=!0;var e=(new Date).getFullYear(),t=new Date(e,0,1),r=new Date(e,6,1),a=t.getTimezoneOffset(),o=r.getTimezoneOffset(),i=Math.max(a,o);n()[Vr()>>2]=60*i,n()[qr()>>2]=Number(a!=o);var u=l(t),s=l(r),c=V(u),f=V(s);o<a?(n()[zr()>>2]=c,n()[zr()+4>>2]=f):(n()[zr()>>2]=f,n()[zr()+4>>2]=c)}function l(e){var t=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return t?t[1]:\"GMT\"}}function Er(e,t){_r();var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getSeconds(),n()[t+4>>2]=r.getMinutes(),n()[t+8>>2]=r.getHours(),n()[t+12>>2]=r.getDate(),n()[t+16>>2]=r.getMonth(),n()[t+20>>2]=r.getFullYear()-1900,n()[t+24>>2]=r.getDay();var a=new Date(r.getFullYear(),0,1),o=(r.getTime()-a.getTime())/864e5|0;n()[t+28>>2]=o,n()[t+36>>2]=-60*r.getTimezoneOffset();var i=new Date(r.getFullYear(),6,1).getTimezoneOffset(),u=a.getTimezoneOffset(),s=0|(i!=u&&r.getTimezoneOffset()==Math.min(u,i));n()[t+32>>2]=s;var c=n()[zr()+(s?4:0)>>2];return n()[t+40>>2]=c,t}function vr(e){_r();var t=new Date(n()[e+20>>2]+1900,n()[e+16>>2],n()[e+12>>2],n()[e+8>>2],n()[e+4>>2],n()[e>>2],0),r=n()[e+32>>2],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);if(r<0)n()[e+32>>2]=Number(i!=u&&s==a);else if(r>0!=(s==a)){var c=Math.max(u,i),f=r>0?s:c;t.setTime(t.getTime()+6e4*(f-a))}n()[e+24>>2]=t.getDay();var l=(t.getTime()-o.getTime())/864e5|0;return n()[e+28>>2]=l,n()[e>>2]=t.getSeconds(),n()[e+4>>2]=t.getMinutes(),n()[e+8>>2]=t.getHours(),n()[e+12>>2]=t.getDate(),n()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0}function yr(e){if(E)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=Le.getNewWorker();if(void 0!==t.pthread)throw\"Internal error!\";if(!e.pthread_ptr)throw\"Internal error, no pthread ptr!\";Le.runningWorkers.push(t);for(var r=Wr(512),o=0;o<128;++o)n()[r+4*o>>2]=0;var i=e.stackBase+e.stackSize,u=Le.pthreads[e.pthread_ptr]={worker:t,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=u.threadInfoStruct>>2;Atomics.store(a(),s+16,e.detached),Atomics.store(a(),s+25,r),Atomics.store(a(),s+10,u.threadInfoStruct),Atomics.store(a(),s+20,e.stackSize),Atomics.store(a(),s+19,i),Atomics.store(a(),s+26,e.stackSize),Atomics.store(a(),s+28,i),Atomics.store(a(),s+29,e.detached);var c=Yr()+40;Atomics.store(a(),s+43,c),t.pthread=u;var f={cmd:\"run\",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};t.runPthread=function(){f.time=performance.now(),t.postMessage(f,e.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread)}function Tr(e,t,r,o){if(\"undefined\"==typeof SharedArrayBuffer)return N(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return N(\"pthread_create called with a null thread pointer!\"),28;var i=[];if(E&&0===i.length)return $r(687865856,e,t,r,o);var u=0,s=0,c=0;t&&-1!=t?(u=n()[t>>2],u+=81920,s=n()[t+8>>2],c=0!==n()[t+12>>2]):u=2097152;var f=0==s;f?s=sn(16,u):B((s-=u)>0);for(var l=Wr(228),d=0;d<57;++d)a()[(l>>2)+d]=0;n()[e>>2]=l,n()[l+12>>2]=l;var m=l+152;n()[m>>2]=m;var p={stackBase:s,stackSize:u,allocatedOwnStack:f,detached:c,startRoutine:r,pthread_ptr:l,arg:o,transferList:i};return E?(p.cmd=\"spawnThread\",postMessage(p,i)):yr(p),0}function Or(){if(E){var e=Gr();if(e&&!Atomics.load(a(),e+56>>2)&&2==Atomics.load(a(),e+0>>2))throw\"Canceled!\"}}function wr(e,t,r){if(!e)return N(\"pthread_join attempted on a null thread pointer!\"),ke.ESRCH;if(E&&Gr()==e)return N(\"PThread \"+e+\" is attempting to join to itself!\"),ke.EDEADLK;if(!E&&Zr()==e)return N(\"Main thread \"+e+\" is attempting to join to itself!\"),ke.EDEADLK;if(n()[e+12>>2]!==e)return N(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),ke.ESRCH;if(Atomics.load(a(),e+64>>2))return N(\"Attempted to join thread \"+e+\", which was already detached!\"),ke.EINVAL;for(r&&At();;){var o=Atomics.load(a(),e+0>>2);if(1==o){var i=Atomics.load(a(),e+4>>2);return t&&(n()[t>>2]=i),Atomics.store(a(),e+64>>2,1),E?postMessage({cmd:\"cleanupThread\",thread:e}):Ie(e),0}if(!r)return ke.EBUSY;Or(),E||Qr(),Ct(e+0,o,E?100:1)}}function Sr(e,t){return wr(e,t,!0)}function Ar(e){return e%4==0&&(e%100!=0||e%400==0)}function br(e,t){for(var r=0,n=0;n<=t;r+=e[n++]);return r}var Cr,xr=[31,29,31,30,31,30,31,31,30,31,30,31],Dr=[31,28,31,30,31,30,31,31,30,31,30,31];function kr(e,t){for(var r=new Date(e.getTime());t>0;){var n=Ar(r.getFullYear()),a=r.getMonth(),o=(n?xr:Dr)[a];if(!(t>o-r.getDate()))return r.setDate(r.getDate()+t),r;t-=o-r.getDate()+1,r.setDate(1),a<11?r.setMonth(a+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return r}function Rr(e,t,r,a){var o=n()[a+40>>2],i={tm_sec:n()[a>>2],tm_min:n()[a+4>>2],tm_hour:n()[a+8>>2],tm_mday:n()[a+12>>2],tm_mon:n()[a+16>>2],tm_year:n()[a+20>>2],tm_wday:n()[a+24>>2],tm_yday:n()[a+28>>2],tm_isdst:n()[a+32>>2],tm_gmtoff:n()[a+36>>2],tm_zone:o?Y(o):\"\"},u=Y(r),s={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var c in s)u=u.replace(new RegExp(c,\"g\"),s[c]);var f=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],l=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function d(e,t,r){for(var n=\"number\"==typeof e?e.toString():e||\"\";n.length<t;)n=r[0]+n;return n}function m(e,t){return d(e,t,\"0\")}function p(e,t){function r(e){return e<0?-1:e>0?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function h(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function g(e){var t=kr(new Date(e.tm_year+1900,0,1),e.tm_yday),r=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),a=h(r),o=h(n);return p(a,t)<=0?p(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var _={\"%a\":function(e){return f[e.tm_wday].substring(0,3)},\"%A\":function(e){return f[e.tm_wday]},\"%b\":function(e){return l[e.tm_mon].substring(0,3)},\"%B\":function(e){return l[e.tm_mon]},\"%C\":function(e){return m((e.tm_year+1900)/100|0,2)},\"%d\":function(e){return m(e.tm_mday,2)},\"%e\":function(e){return d(e.tm_mday,2,\" \")},\"%g\":function(e){return g(e).toString().substring(2)},\"%G\":function(e){return g(e)},\"%H\":function(e){return m(e.tm_hour,2)},\"%I\":function(e){var t=e.tm_hour;return 0==t?t=12:t>12&&(t-=12),m(t,2)},\"%j\":function(e){return m(e.tm_mday+br(Ar(e.tm_year+1900)?xr:Dr,e.tm_mon-1),3)},\"%m\":function(e){return m(e.tm_mon+1,2)},\"%M\":function(e){return m(e.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return e.tm_hour>=0&&e.tm_hour<12?\"AM\":\"PM\"},\"%S\":function(e){return m(e.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.tm_wday||7},\"%U\":function(e){var t=new Date(e.tm_year+1900,0,1),r=0===t.getDay()?t:kr(t,7-t.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=br(Ar(n.getFullYear())?xr:Dr,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%V\":function(e){var t,r=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),a=h(r),o=h(n),i=kr(new Date(e.tm_year+1900,0,1),e.tm_yday);return p(i,a)<0?\"53\":p(o,i)<=0?\"01\":(t=a.getFullYear()<e.tm_year+1900?e.tm_yday+32-a.getDate():e.tm_yday+1-a.getDate(),m(Math.ceil(t/7),2))},\"%w\":function(e){return e.tm_wday},\"%W\":function(e){var t=new Date(e.tm_year,0,1),r=1===t.getDay()?t:kr(t,0===t.getDay()?1:7-t.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=br(Ar(n.getFullYear())?xr:Dr,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%y\":function(e){return(e.tm_year+1900).toString().substring(2)},\"%Y\":function(e){return e.tm_year+1900},\"%z\":function(e){var t=e.tm_gmtoff,r=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(r?\"+\":\"-\")+String(\"0000\"+t).slice(-4)},\"%Z\":function(e){return e.tm_zone},\"%%\":function(){return\"%\"}};for(var c in _)u.indexOf(c)>=0&&(u=u.replace(new RegExp(c,\"g\"),_[c](i)));var E=Fr(u,!1);return E.length>t?0:(X(E,e),E.length-1)}function Nr(e,t,r,n){return Rr(e,t,r,n)}function Mr(e){if(E)return kt(25,1,e);switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return Ge(28),-1}E||Le.initMainThreadBlock();var Ir=[null,Ve,et,tt,rt,nt,ot,it,ut,ct,lt,dt,mt,pt,ht,gt,Vt,ur,sr,cr,fr,lr,dr,pr,_r,Mr];function Fr(e,t,r){var n=r>0?r:q(e)+1,a=new Array(n),o=j(e,a,0,a.length);return t&&(a.length=o),a}var Lr,Pr={h:Ue,P:je,b:qe,d:Xe,e:Ke,c:Je,V:et,x:tt,$:rt,ca:nt,v:at,W:ot,_:it,Z:ut,ba:ct,aa:lt,p:dt,U:mt,X:pt,z:ht,Y:gt,O:_t,g:Et,y:Ye,ea:vt,D:yt,l:Tt,E:Ot,ga:wt,u:St,K:At,n:bt,k:Ct,j:Re,i:Fe,I:xt,q:Dt,L:It,J:Pt,M:Xt,t:Qt,N:nr,S:ur,T:sr,m:cr,Q:fr,w:lr,F:dr,o:pr,R:hr,fa:gr,H:xe,B:Er,a:D||s.wasmMemory,A:vr,G:Qe,s:Tr,C:Sr,da:Rr,f:Nr,r:Mr},Hr=(be(),s.___wasm_call_ctors=function(){return(Hr=s.___wasm_call_ctors=s.asm.ha).apply(null,arguments)}),Wr=(s._OrtInit=function(){return(s._OrtInit=s.asm.ia).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.ja).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ka).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.la).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ma).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.na).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.oa).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.pa).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.qa).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ra).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.sa).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ta).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ua).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.va).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.wa).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.xa).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.ya).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.za).apply(null,arguments)},s._malloc=function(){return(Wr=s._malloc=s.asm.Ba).apply(null,arguments)}),Ur=s.___errno_location=function(){return(Ur=s.___errno_location=s.asm.Ca).apply(null,arguments)},Br=s._free=function(){return(Br=s._free=s.asm.Da).apply(null,arguments)},Gr=s._pthread_self=function(){return(Gr=s._pthread_self=s.asm.Ea).apply(null,arguments)},Yr=s._emscripten_get_global_libc=function(){return(Yr=s._emscripten_get_global_libc=s.asm.Fa).apply(null,arguments)},jr=s._memset=function(){return(jr=s._memset=s.asm.Ga).apply(null,arguments)},zr=s.__get_tzname=function(){return(zr=s.__get_tzname=s.asm.Ha).apply(null,arguments)},qr=s.__get_daylight=function(){return(qr=s.__get_daylight=s.asm.Ia).apply(null,arguments)},Vr=s.__get_timezone=function(){return(Vr=s.__get_timezone=s.asm.Ja).apply(null,arguments)},Xr=(s.___em_js__initPthreadsJS=function(){return(s.___em_js__initPthreadsJS=s.asm.Ka).apply(null,arguments)},s.___pthread_tsd_run_dtors=function(){return(Xr=s.___pthread_tsd_run_dtors=s.asm.La).apply(null,arguments)}),Qr=s._emscripten_main_thread_process_queued_calls=function(){return(Qr=s._emscripten_main_thread_process_queued_calls=s.asm.Ma).apply(null,arguments)},Kr=(s._emscripten_current_thread_process_queued_calls=function(){return(s._emscripten_current_thread_process_queued_calls=s.asm.Na).apply(null,arguments)},s._emscripten_register_main_browser_thread_id=function(){return(Kr=s._emscripten_register_main_browser_thread_id=s.asm.Oa).apply(null,arguments)}),Zr=s._emscripten_main_browser_thread_id=function(){return(Zr=s._emscripten_main_browser_thread_id=s.asm.Pa).apply(null,arguments)},Jr=s.__emscripten_do_dispatch_to_thread=function(){return(Jr=s.__emscripten_do_dispatch_to_thread=s.asm.Qa).apply(null,arguments)},$r=s._emscripten_sync_run_in_main_thread_4=function(){return($r=s._emscripten_sync_run_in_main_thread_4=s.asm.Ra).apply(null,arguments)},en=s._emscripten_run_in_main_runtime_thread_js=function(){return(en=s._emscripten_run_in_main_runtime_thread_js=s.asm.Sa).apply(null,arguments)},tn=s.__emscripten_call_on_thread=function(){return(tn=s.__emscripten_call_on_thread=s.asm.Ta).apply(null,arguments)},rn=(s._emscripten_tls_init=function(){return(s._emscripten_tls_init=s.asm.Ua).apply(null,arguments)},s.__emscripten_thread_init=function(){return(rn=s.__emscripten_thread_init=s.asm.Va).apply(null,arguments)}),nn=s.stackSave=function(){return(nn=s.stackSave=s.asm.Wa).apply(null,arguments)},an=s.stackRestore=function(){return(an=s.stackRestore=s.asm.Xa).apply(null,arguments)},on=s.stackAlloc=function(){return(on=s.stackAlloc=s.asm.Ya).apply(null,arguments)},un=s._emscripten_stack_set_limits=function(){return(un=s._emscripten_stack_set_limits=s.asm.Za).apply(null,arguments)},sn=s._memalign=function(){return(sn=s._memalign=s.asm._a).apply(null,arguments)},cn=s.__emscripten_allow_main_runtime_queued_calls=767088,fn=s.__emscripten_main_thread_futex=772432;function ln(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function dn(e){if(e=e||l,!(de>0)){if(E)return i(s),void postMessage({cmd:\"loaded\"});oe(),de>0||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),t()}),1)):t())}function t(){Lr||(Lr=!0,s.calledRun=!0,U||(ie(),ue(),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),ce()))}}function mn(e,t){if(!t||!x||0!==e){if(!t&&E)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new ln(e);x||(Le.terminateAllThreads(),se(),s.onExit&&s.onExit(e),U=!0),m(e,new ln(e))}}if(s.UTF8ToString=Y,s.stringToUTF8=z,s.lengthBytesUTF8=q,s.PThread=Le,s.stackSave=nn,s.stackRestore=an,s.stackAlloc=on,s.PThread=Le,s.wasmMemory=D,s.ExitStatus=ln,pe=function e(){Lr||dn(),Lr||(pe=e)},s.run=dn,s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);s.preInit.length>0;)s.preInit.pop()();return E&&Le.initWorker(),dn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\nvar Module=typeof ortWasm!==\"undefined\"?ortWasm:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix=\"file://\";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile0=\"ort-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"T\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"wa\"];removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(a0,a1){return _atexit(a0,a1)}function ___cxa_thread_atexit(a0,a1){return _atexit(a0,a1)}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_lstat64(path,buf){}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%16384!==0){return-28}if((flags&32)!==0){ptr=_memalign(16384,len);if(!ptr)return-48;_memset(ptr,0,len);allocated=true}else{return-52}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){return syscallMmap2(addr,len,prot,flags,fd,off)}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___sys_munmap(addr,len){return syscallMunmap(addr,len)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_readlink(path,buf,bufsize){path=SYSCALLS.getStr(path);return SYSCALLS.doReadlink(path,buf,bufsize)}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function _abort(){abort()}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!==\"undefined\"){_emscripten_get_now=dateNow}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _difftime(time1,time0){return time1-time0}function _dlclose(handle){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlerror(){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlopen(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlsym(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _emscripten_thread_sleep(msecs){var start=_emscripten_get_now();while(_emscripten_get_now()-start<msecs){}}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;if(!_gmtime_r.GMTString)_gmtime_r.GMTString=allocateUTF8(\"GMT\");HEAP32[tmPtr+40>>2]=_gmtime_r.GMTString;return tmPtr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return match?match[1]:\"GMT\"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();return date.getTime()/1e3|0}function _pthread_create(){return 6}function _pthread_join(){return 28}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _sysconf(name){switch(name){case 30:return 16384;case 85:var maxHeapSize=2147483648;return maxHeapSize/16384;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator===\"object\")return navigator[\"hardwareConcurrency\"]||1;return 1}}setErrNo(28);return-1}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"a\":___cxa_allocate_exception,\"c\":___cxa_atexit,\"d\":___cxa_thread_atexit,\"b\":___cxa_throw,\"F\":___sys_access,\"p\":___sys_fcntl64,\"L\":___sys_fstat64,\"O\":___sys_getdents64,\"m\":___sys_getpid,\"G\":___sys_ioctl,\"K\":___sys_lstat64,\"J\":___sys_mkdir,\"N\":___sys_mmap2,\"M\":___sys_munmap,\"j\":___sys_open,\"E\":___sys_readlink,\"H\":___sys_rmdir,\"r\":___sys_stat64,\"I\":___sys_unlink,\"i\":_abort,\"q\":_clock_gettime,\"u\":_difftime,\"R\":_dlclose,\"h\":_dlerror,\"S\":_dlopen,\"Q\":_dlsym,\"y\":_emscripten_memcpy_big,\"f\":_emscripten_resize_heap,\"D\":_emscripten_thread_sleep,\"B\":_environ_get,\"C\":_environ_sizes_get,\"g\":_fd_close,\"z\":_fd_fdstat_get,\"o\":_fd_read,\"x\":_fd_seek,\"n\":_fd_write,\"A\":_gettimeofday,\"v\":_gmtime_r,\"k\":_localtime_r,\"t\":_mktime,\"w\":_pthread_create,\"l\":_pthread_join,\"P\":_strftime,\"e\":_strftime_l,\"s\":_sysconf};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"U\"]).apply(null,arguments)};var _OrtInit=Module[\"_OrtInit\"]=function(){return(_OrtInit=Module[\"_OrtInit\"]=Module[\"asm\"][\"V\"]).apply(null,arguments)};var _OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=function(){return(_OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=Module[\"asm\"][\"W\"]).apply(null,arguments)};var _OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=function(){return(_OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=Module[\"asm\"][\"X\"]).apply(null,arguments)};var _OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=function(){return(_OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=Module[\"asm\"][\"Y\"]).apply(null,arguments)};var _OrtCreateSession=Module[\"_OrtCreateSession\"]=function(){return(_OrtCreateSession=Module[\"_OrtCreateSession\"]=Module[\"asm\"][\"Z\"]).apply(null,arguments)};var _OrtReleaseSession=Module[\"_OrtReleaseSession\"]=function(){return(_OrtReleaseSession=Module[\"_OrtReleaseSession\"]=Module[\"asm\"][\"_\"]).apply(null,arguments)};var _OrtGetInputCount=Module[\"_OrtGetInputCount\"]=function(){return(_OrtGetInputCount=Module[\"_OrtGetInputCount\"]=Module[\"asm\"][\"$\"]).apply(null,arguments)};var _OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=function(){return(_OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=Module[\"asm\"][\"aa\"]).apply(null,arguments)};var _OrtGetInputName=Module[\"_OrtGetInputName\"]=function(){return(_OrtGetInputName=Module[\"_OrtGetInputName\"]=Module[\"asm\"][\"ba\"]).apply(null,arguments)};var _OrtGetOutputName=Module[\"_OrtGetOutputName\"]=function(){return(_OrtGetOutputName=Module[\"_OrtGetOutputName\"]=Module[\"asm\"][\"ca\"]).apply(null,arguments)};var _OrtFree=Module[\"_OrtFree\"]=function(){return(_OrtFree=Module[\"_OrtFree\"]=Module[\"asm\"][\"da\"]).apply(null,arguments)};var _OrtCreateTensor=Module[\"_OrtCreateTensor\"]=function(){return(_OrtCreateTensor=Module[\"_OrtCreateTensor\"]=Module[\"asm\"][\"ea\"]).apply(null,arguments)};var _OrtGetTensorData=Module[\"_OrtGetTensorData\"]=function(){return(_OrtGetTensorData=Module[\"_OrtGetTensorData\"]=Module[\"asm\"][\"fa\"]).apply(null,arguments)};var _OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=function(){return(_OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=Module[\"asm\"][\"ga\"]).apply(null,arguments)};var _OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=function(){return(_OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=Module[\"asm\"][\"ha\"]).apply(null,arguments)};var _OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=function(){return(_OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=Module[\"asm\"][\"ia\"]).apply(null,arguments)};var _OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=function(){return(_OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=Module[\"asm\"][\"ja\"]).apply(null,arguments)};var _OrtRun=Module[\"_OrtRun\"]=function(){return(_OrtRun=Module[\"_OrtRun\"]=Module[\"asm\"][\"ka\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"la\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"ma\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"na\"]).apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return(_memset=Module[\"_memset\"]=Module[\"asm\"][\"oa\"]).apply(null,arguments)};var __get_tzname=Module[\"__get_tzname\"]=function(){return(__get_tzname=Module[\"__get_tzname\"]=Module[\"asm\"][\"pa\"]).apply(null,arguments)};var __get_daylight=Module[\"__get_daylight\"]=function(){return(__get_daylight=Module[\"__get_daylight\"]=Module[\"asm\"][\"qa\"]).apply(null,arguments)};var __get_timezone=Module[\"__get_timezone\"]=function(){return(__get_timezone=Module[\"__get_timezone\"]=Module[\"asm\"][\"ra\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"sa\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"ta\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"ua\"]).apply(null,arguments)};var _memalign=Module[\"_memalign\"]=function(){return(_memalign=Module[\"_memalign\"]=Module[\"asm\"][\"va\"]).apply(null,arguments)};Module[\"UTF8ToString\"]=UTF8ToString;Module[\"stringToUTF8\"]=stringToUTF8;Module[\"lengthBytesUTF8\"]=lengthBytesUTF8;Module[\"stackSave\"]=stackSave;Module[\"stackRestore\"]=stackRestore;Module[\"stackAlloc\"]=stackAlloc;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Backend} from './backend';\r\n\r\ninterface BackendInfo {\r\n  backend: Backend;\r\n  priority: number;\r\n\r\n  initializing?: boolean;\r\n  initialized?: boolean;\r\n  aborted?: boolean;\r\n}\r\n\r\nconst backends: {[name: string]: BackendInfo} = {};\r\nconst backendsSortedByPriority: string[] = [];\r\n\r\n/**\r\n * Register a backend.\r\n *\r\n * @param name - the name as a key to lookup as an execution provider.\r\n * @param backend - the backend object.\r\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority.\r\n */\r\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\r\n  if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\r\n    const currentBackend = backends[name];\r\n    if (currentBackend === undefined) {\r\n      backends[name] = {backend, priority};\r\n    } else if (currentBackend.backend === backend) {\r\n      return;\r\n    } else {\r\n      throw new Error(`backend \"${name}\" is already registered`);\r\n    }\r\n\r\n    for (let i = 0; i < backendsSortedByPriority.length; i++) {\r\n      if (backends[backendsSortedByPriority[i]].priority <= priority) {\r\n        backendsSortedByPriority.splice(i, 0, name);\r\n        return;\r\n      }\r\n    }\r\n    backendsSortedByPriority.push(name);\r\n    return;\r\n  }\r\n\r\n  throw new TypeError('not a valid backend');\r\n};\r\n\r\n/**\r\n * Resolve backend by specified hints.\r\n *\r\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\r\n * @returns a promise that resolves to the backend.\r\n */\r\nexport const resolveBackend = async(backendHints: readonly string[]): Promise<Backend> => {\r\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\r\n  const errors = [];\r\n  for (const backendName of backendNames) {\r\n    const backendInfo = backends[backendName];\r\n    if (backendInfo) {\r\n      if (backendInfo.initialized) {\r\n        return backendInfo.backend;\r\n      } else if (backendInfo.initializing) {\r\n        throw new Error(`backend \"${backendName}\" is being initialized; cannot initialize multiple times.`);\r\n      } else if (backendInfo.aborted) {\r\n        continue;  // current backend is unavailable; try next\r\n      }\r\n\r\n      try {\r\n        backendInfo.initializing = true;\r\n        await backendInfo.backend.init();\r\n        backendInfo.initialized = true;\r\n        return backendInfo.backend;\r\n      } catch (e) {\r\n        errors.push({name: backendName, err: e});\r\n        backendInfo.aborted = true;\r\n      } finally {\r\n        backendInfo.initializing = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from './inference-session';\r\nimport {OnnxValue} from './onnx-value';\r\n\r\nexport declare namespace SessionHandler {\r\n  type FeedsType = {[name: string]: OnnxValue};\r\n  type FetchesType = {[name: string]: OnnxValue | null};\r\n  type ReturnType = {[name: string]: OnnxValue};\r\n}\r\n\r\n/**\r\n * Represent a handler instance of an inference session.\r\n */\r\nexport interface SessionHandler {\r\n  dispose(): Promise<void>;\r\n\r\n  readonly inputNames: readonly string[];\r\n  readonly outputNames: readonly string[];\r\n\r\n  startProfiling(): void;\r\n  endProfiling(): void;\r\n\r\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\r\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\r\n}\r\n\r\n/**\r\n * Represent a backend that provides implementation of model inferencing.\r\n */\r\nexport interface Backend {\r\n  /**\r\n   * Initialize the backend asynchronously. Should throw when failed.\r\n   */\r\n  init(): Promise<void>;\r\n\r\n  createSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler>;\r\n}\r\n\r\nexport {registerBackend} from './backend-impl';\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from './env';\r\n\r\ntype LogLevelType = Env['logLevel'];\r\nexport class EnvImpl implements Env {\r\n  constructor() {\r\n    this.wasm = {};\r\n    this.webgl = {};\r\n    this.logLevelInternal = 'warning';\r\n  }\r\n\r\n  // TODO standadize the getter and setter convention in env for other fields.\r\n  set logLevel(value: LogLevelType) {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\r\n      throw new Error(`Unsupported logging level: ${value}`);\r\n    }\r\n    this.logLevelInternal = value;\r\n  }\r\n  get logLevel(): LogLevelType {\r\n    return this.logLevelInternal;\r\n  }\r\n\r\n  debug?: boolean;\r\n\r\n  wasm: Env.WebAssemblyFlags;\r\n\r\n  webgl: Env.WebGLFlags;\r\n\r\n  [name: string]: unknown;\r\n\r\n  private logLevelInternal: Required<LogLevelType>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {EnvImpl} from './env-impl';\r\nexport declare namespace Env {\r\n  export interface WebAssemblyFlags {\r\n    /**\r\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\r\n     * to 1, no worker thread will be spawned.\r\n     *\r\n     * This setting is available only when WebAssembly multithread feature is available in current context.\r\n     */\r\n    numThreads?: number;\r\n\r\n    /**\r\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\r\n     * value indicates no timeout is set. (default is 0)\r\n     */\r\n    initTimeout?: number;\r\n  }\r\n\r\n  export interface WebGLFlags {\r\n    /**\r\n     * Set or get the WebGL Context ID (webgl or webgl2). Default value is webgl2.\r\n     */\r\n    contextId?: 'webgl'|'webgl2';\r\n    /**\r\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\r\n     */\r\n    matmulMaxBatchSize?: number;\r\n    /**\r\n     * Set or get the texture cache mode. Default value is full.\r\n     */\r\n    textureCacheMode?: 'initializerOnly'|'full';\r\n    /**\r\n     * Set or get the packed texture mode\r\n     */\r\n    pack?: boolean;\r\n  }\r\n}\r\n\r\nexport interface Env {\r\n  /**\r\n   * set the severity level for logging. If omitted, default is 'warning'\r\n   */\r\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\r\n  /**\r\n   * Indicate whether run in debug mode.\r\n   */\r\n  debug?: boolean;\r\n\r\n  /**\r\n   * Represent a set of flags for WebAssembly\r\n   */\r\n  wasm: Env.WebAssemblyFlags;\r\n\r\n  /**\r\n   * Represent a set of flags for WebGL\r\n   */\r\n  webgl: Env.WebGLFlags;\r\n\r\n  [name: string]: unknown;\r\n}\r\n\r\n/**\r\n * Represent a set of flags as a global singleton.\r\n */\r\nexport const env: Env = new EnvImpl();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {resolveBackend} from './backend-impl';\r\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\r\nimport {OnnxValue} from './onnx-value';\r\nimport {Tensor} from './tensor';\r\n\r\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\r\ntype RunOptions = InferenceSessionInterface.RunOptions;\r\ntype FeedsType = InferenceSessionInterface.FeedsType;\r\ntype FetchesType = InferenceSessionInterface.FetchesType;\r\ntype ReturnType = InferenceSessionInterface.ReturnType;\r\n\r\nexport class InferenceSession implements InferenceSessionInterface {\r\n  private constructor(handler: SessionHandler) {\r\n    this.handler = handler;\r\n  }\r\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\r\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\r\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\r\n    const fetches: {[name: string]: OnnxValue|null} = {};\r\n    let options: RunOptions = {};\r\n    // check inputs\r\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\r\n      throw new TypeError(\r\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\r\n    }\r\n\r\n    let isFetchesEmpty = true;\r\n    // determine which override is being used\r\n    if (typeof arg1 === 'object') {\r\n      if (arg1 === null) {\r\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\r\n      }\r\n      if (arg1 instanceof Tensor) {\r\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\r\n      }\r\n\r\n      if (Array.isArray(arg1)) {\r\n        if (arg1.length === 0) {\r\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\r\n        }\r\n        isFetchesEmpty = false;\r\n        // output names\r\n        for (const name of arg1) {\r\n          if (typeof name !== 'string') {\r\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\r\n          }\r\n          if (this.outputNames.indexOf(name) === -1) {\r\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\r\n          }\r\n          fetches[name] = null;\r\n        }\r\n\r\n        if (typeof arg2 === 'object' && arg2 !== null) {\r\n          options = arg2;\r\n        } else if (typeof arg2 !== 'undefined') {\r\n          throw new TypeError('\\'options\\' must be an object.');\r\n        }\r\n      } else {\r\n        // decide whether arg1 is fetches or options\r\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\r\n        let isFetches = false;\r\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\r\n        for (const name of this.outputNames) {\r\n          if (arg1Keys.indexOf(name) !== -1) {\r\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\r\n            if (v === null || v instanceof Tensor) {\r\n              isFetches = true;\r\n              isFetchesEmpty = false;\r\n              fetches[name] = v;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isFetches) {\r\n          if (typeof arg2 === 'object' && arg2 !== null) {\r\n            options = arg2;\r\n          } else if (typeof arg2 !== 'undefined') {\r\n            throw new TypeError('\\'options\\' must be an object.');\r\n          }\r\n        } else {\r\n          options = arg1 as RunOptions;\r\n        }\r\n      }\r\n    } else if (typeof arg1 !== 'undefined') {\r\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\r\n    }\r\n\r\n    // check if all inputs are in feed\r\n    for (const name of this.inputNames) {\r\n      if (typeof feeds[name] === 'undefined') {\r\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\r\n      }\r\n    }\r\n\r\n    // if no fetches is specified, we use the full output names list\r\n    if (isFetchesEmpty) {\r\n      for (const name of this.outputNames) {\r\n        fetches[name] = null;\r\n      }\r\n    }\r\n\r\n    // feeds, fetches and options are prepared\r\n\r\n    const results = await this.handler.run(feeds, fetches, options);\r\n    const returnValue: {[name: string]: OnnxValue} = {};\r\n    for (const key in results) {\r\n      if (Object.hasOwnProperty.call(results, key)) {\r\n        returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\r\n      }\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\r\n      Promise<InferenceSessionInterface>;\r\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\r\n  static async create(\r\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\r\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\r\n    // either load from a file or buffer\r\n    let filePathOrUint8Array: string|Uint8Array;\r\n    let options: SessionOptions = {};\r\n\r\n    if (typeof arg0 === 'string') {\r\n      filePathOrUint8Array = arg0;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n    } else if (arg0 instanceof Uint8Array) {\r\n      filePathOrUint8Array = arg0;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n    } else if (\r\n        arg0 instanceof ArrayBuffer ||\r\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\r\n      const buffer = arg0;\r\n      let byteOffset = 0;\r\n      let byteLength = arg0.byteLength;\r\n      if (typeof arg1 === 'object' && arg1 !== null) {\r\n        options = arg1;\r\n      } else if (typeof arg1 === 'number') {\r\n        byteOffset = arg1;\r\n        if (!Number.isSafeInteger(byteOffset)) {\r\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\r\n        }\r\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\r\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\r\n        }\r\n        byteLength = arg0.byteLength - byteOffset;\r\n        if (typeof arg2 === 'number') {\r\n          byteLength = arg2;\r\n          if (!Number.isSafeInteger(byteLength)) {\r\n            throw new RangeError('\\'byteLength\\' must be an integer.');\r\n          }\r\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\r\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\r\n          }\r\n          if (typeof arg3 === 'object' && arg3 !== null) {\r\n            options = arg3;\r\n          } else if (typeof arg3 !== 'undefined') {\r\n            throw new TypeError('\\'options\\' must be an object.');\r\n          }\r\n        } else if (typeof arg2 !== 'undefined') {\r\n          throw new TypeError('\\'byteLength\\' must be a number.');\r\n        }\r\n      } else if (typeof arg1 !== 'undefined') {\r\n        throw new TypeError('\\'options\\' must be an object.');\r\n      }\r\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\r\n    } else {\r\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\r\n    }\r\n\r\n    // get backend hints\r\n    const eps = options.executionProviders || [];\r\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\r\n    const backend = await resolveBackend(backendHints);\r\n    const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\r\n    return new InferenceSession(handler);\r\n  }\r\n\r\n  startProfiling(): void {\r\n    this.handler.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.handler.endProfiling();\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this.handler.inputNames;\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this.handler.outputNames;\r\n  }\r\n\r\n  private handler: SessionHandler;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession as InferenceSessionImpl} from './inference-session-impl';\r\nimport {OnnxValue} from './onnx-value';\r\n\r\n/* eslint-disable @typescript-eslint/no-redeclare */\r\n\r\nexport declare namespace InferenceSession {\r\n  //#region input/output types\r\n\r\n  type OnnxValueMapType = {readonly [name: string]: OnnxValue};\r\n  type NullableOnnxValueMapType = {readonly [name: string]: OnnxValue | null};\r\n\r\n  /**\r\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\r\n   */\r\n  type FeedsType = OnnxValueMapType;\r\n\r\n  /**\r\n   * A fetches (model outputs) could be one of the following:\r\n   *\r\n   * - Omitted. Use model's output names definition.\r\n   * - An array of string indicating the output names.\r\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\r\n   *\r\n   * REMARK: different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\r\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\r\n   * internally.\r\n   */\r\n  type FetchesType = readonly string[]|NullableOnnxValueMapType;\r\n\r\n  /**\r\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\r\n   */\r\n  type ReturnType = OnnxValueMapType;\r\n\r\n  //#endregion\r\n\r\n  //#region session options\r\n\r\n  /**\r\n   * A set of configurations for session behavior.\r\n   */\r\n  export interface SessionOptions {\r\n    /**\r\n     * An array of execution provider options.\r\n     *\r\n     * An execution provider option can be a string indicating the name of the execution provider,\r\n     * or an object of corresponding type.\r\n     */\r\n    executionProviders?: readonly ExecutionProviderConfig[];\r\n\r\n    /**\r\n     * The intra OP threads number.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\r\n     */\r\n    intraOpNumThreads?: number;\r\n\r\n    /**\r\n     * The inter OP threads number.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\r\n     */\r\n    interOpNumThreads?: number;\r\n\r\n    /**\r\n     * The optimization level.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    graphOptimizationLevel?: 'disabled'|'basic'|'extended'|'all';\r\n\r\n    /**\r\n     * Whether enable CPU memory arena.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    enableCpuMemArena?: boolean;\r\n\r\n    /**\r\n     * Whether enable memory pattern.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    enableMemPattern?: boolean;\r\n\r\n    /**\r\n     * Execution mode.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    executionMode?: 'sequential'|'parallel';\r\n\r\n    /**\r\n     * Wether enable profiling.\r\n     *\r\n     * This setting is a placeholder for a future use.\r\n     */\r\n    enableProfiling?: boolean;\r\n\r\n    /**\r\n     * File prefix for profiling.\r\n     *\r\n     * This setting is a placeholder for a future use.\r\n     */\r\n    profileFilePrefix?: string;\r\n\r\n    /**\r\n     * Log ID.\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    logId?: string;\r\n\r\n    /**\r\n     * Log severity level. See\r\n     * https://github.com/microsoft/onnxruntime/blob/master/include/onnxruntime/core/common/logging/severity.h\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    logSeverityLevel?: 0|1|2|3|4;\r\n\r\n    /**\r\n     * Log verbosity level.\r\n     *\r\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\r\n     */\r\n    logVerbosityLevel?: number;\r\n\r\n    /**\r\n     * Store configurations for a session. See\r\n     * https://github.com/microsoft/onnxruntime/blob/master/include/onnxruntime/core/session/\r\n     * onnxruntime_session_options_config_keys.h\r\n     *\r\n     * In example,\r\n     *\r\n     * ```js\r\n     * extra: {\r\n     *   session: {\r\n     *     set_denormal_as_zero: \"1\",\r\n     *     disable_prepacking: \"1\"\r\n     *   },\r\n     *   optimization: {\r\n     *     enable_gelu_approximation: \"1\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\r\n     */\r\n    extra?: Record<string, unknown>;\r\n  }\r\n\r\n  //#region execution providers\r\n\r\n  // Currently, we have the following backends to support execution providers:\r\n  // Backend Node.js binding: supports \"cpu\" and \"cuda\".\r\n  // Backend WebAssembly: supports 'wasm'.\r\n  // Backend ONNX.js: supports 'webgl'.\r\n  interface ExecutionProviderOptionMap {\r\n    cpu: CpuExecutionProviderOption;\r\n    cuda: CudaExecutionProviderOption;\r\n    wasm: WebAssemblyExecutionProviderOption;\r\n    webgl: WebGLExecutionProviderOption;\r\n  }\r\n\r\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\r\n  type ExecutionProviderConfig =\r\n      ExecutionProviderOptionMap[ExecutionProviderName]|ExecutionProviderOption|ExecutionProviderName|string;\r\n\r\n  export interface ExecutionProviderOption {\r\n    readonly name: string;\r\n  }\r\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\r\n    readonly name: 'cpu';\r\n    useArena?: boolean;\r\n  }\r\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\r\n    readonly name: 'cuda';\r\n    deviceId?: number;\r\n  }\r\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\r\n    readonly name: 'wasm';\r\n    // TODO: add flags\r\n  }\r\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\r\n    readonly name: 'webgl';\r\n    // TODO: add flags\r\n  }\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  //#region run options\r\n\r\n  /**\r\n   * A set of configurations for inference run behavior\r\n   */\r\n  export interface RunOptions {\r\n    /**\r\n     * Log severity level. See\r\n     * https://github.com/microsoft/onnxruntime/blob/master/include/onnxruntime/core/common/logging/severity.h\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    logSeverityLevel?: 0|1|2|3|4;\r\n\r\n    /**\r\n     * Log verbosity level.\r\n     *\r\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\r\n     */\r\n    logVerbosityLevel?: number;\r\n\r\n    /**\r\n     * Terminate all incomplete OrtRun calls as soon as possible if true\r\n     *\r\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\r\n     */\r\n    terminate?: boolean;\r\n\r\n    /**\r\n     * A tag for the Run() calls using this\r\n     *\r\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\r\n     */\r\n    tag?: string;\r\n\r\n    /**\r\n     * Set a single run configuration entry. See\r\n     * https://github.com/microsoft/onnxruntime/blob/master/include/onnxruntime/core/session/\r\n     * onnxruntime_run_options_config_keys.h\r\n     *\r\n     * In example,\r\n     *\r\n     * ```js\r\n     * extra: {\r\n     *   memory: {\r\n     *     enable_memory_arena_shrinkage: \"1\",\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\r\n     */\r\n    extra?: Record<string, unknown>;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region value metadata\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n  interface ValueMetadata {\r\n    // TBD\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\n/**\r\n * Represent a runtime instance of an ONNX model.\r\n */\r\nexport interface InferenceSession {\r\n  //#region run()\r\n\r\n  /**\r\n   * Execute the model asynchronously with the given feeds and options.\r\n   *\r\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\r\n   * @param options - Optional. A set of options that controls the behavior of model inference.\r\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\r\n   */\r\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\r\n\r\n  /**\r\n   * Execute the model asynchronously with the given feeds, fetches and options.\r\n   *\r\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\r\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\r\n   * detail.\r\n   * @param options - Optional. A set of options that controls the behavior of model inference.\r\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\r\n   */\r\n  run(feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\r\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\r\n\r\n  //#endregion\r\n\r\n  //#region profiling\r\n\r\n  /**\r\n   * Start profiling.\r\n   */\r\n  startProfiling(): void;\r\n\r\n  /**\r\n   * End profiling.\r\n   */\r\n  endProfiling(): void;\r\n\r\n  //#endregion\r\n\r\n  //#region metadata\r\n\r\n  /**\r\n   * Get input names of the loaded model.\r\n   */\r\n  readonly inputNames: readonly string[];\r\n\r\n  /**\r\n   * Get output names of the loaded model.\r\n   */\r\n  readonly outputNames: readonly string[];\r\n\r\n  // /**\r\n  //  * Get input metadata of the loaded model.\r\n  //  */\r\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\r\n\r\n  // /**\r\n  //  * Get output metadata of the loaded model.\r\n  //  */\r\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\r\n\r\n  //#endregion\r\n}\r\n\r\nexport interface InferenceSessionFactory {\r\n  //#region create()\r\n\r\n  /**\r\n   * Create a new inference session and load model asynchronously from an ONNX model file.\r\n   *\r\n   * @param uri - The URI or file path of the model to load.\r\n   * @param options - specify configuration for creating a new inference session.\r\n   * @returns A promise that resolves to an InferenceSession object.\r\n   */\r\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\r\n\r\n  /**\r\n   * Create a new inference session and load model asynchronously from an array bufer.\r\n   *\r\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\r\n   * @param options - specify configuration for creating a new inference session.\r\n   * @returns A promise that resolves to an InferenceSession object.\r\n   */\r\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\r\n\r\n  /**\r\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\r\n   *\r\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\r\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\r\n   * @param byteLength - The length in bytes of the array buffer.\r\n   * @param options - specify configuration for creating a new inference session.\r\n   * @returns A promise that resolves to an InferenceSession object.\r\n   */\r\n  create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: InferenceSession.SessionOptions):\r\n      Promise<InferenceSession>;\r\n\r\n  /**\r\n   * Create a new inference session and load model asynchronously from a Uint8Array.\r\n   *\r\n   * @param buffer - A Uint8Array representation of an ONNX model.\r\n   * @param options - specify configuration for creating a new inference session.\r\n   * @returns A promise that resolves to an InferenceSession object.\r\n   */\r\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\r\n\r\n  //#endregion\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor as TensorInterface} from './tensor';\r\n\r\ntype TensorType = TensorInterface.Type;\r\ntype TensorDataType = TensorInterface.DataType;\r\n\r\ntype SupportedTypedArrayConstructors = Float32ArrayConstructor|Uint8ArrayConstructor|Int8ArrayConstructor|\r\n    Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Uint8ArrayConstructor|\r\n    Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor;\r\ntype SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\r\n\r\nconst isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\r\nconst isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\r\n\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\r\n  ['float32', Float32Array],\r\n  ['uint8', Uint8Array],\r\n  ['int8', Int8Array],\r\n  ['uint16', Uint16Array],\r\n  ['int16', Int16Array],\r\n  ['int32', Int32Array],\r\n  ['bool', Uint8Array],\r\n  ['float64', Float64Array],\r\n  ['uint32', Uint32Array],\r\n]);\r\n\r\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\r\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, TensorType>([\r\n  [Float32Array, 'float32'],\r\n  [Uint8Array, 'uint8'],\r\n  [Int8Array, 'int8'],\r\n  [Uint16Array, 'uint16'],\r\n  [Int16Array, 'int16'],\r\n  [Int32Array, 'int32'],\r\n  [Float64Array, 'float64'],\r\n  [Uint32Array, 'uint32'],\r\n]);\r\n\r\nif (isBigInt64ArrayAvailable) {\r\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\r\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\r\n}\r\nif (isBigUint64ArrayAvailable) {\r\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\r\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\r\n}\r\n\r\n/**\r\n * calculate size from dims.\r\n *\r\n * @param dims the dims array. May be an illegal input.\r\n */\r\nconst calculateSize = (dims: readonly unknown[]): number => {\r\n  let size = 1;\r\n  for (let i = 0; i < dims.length; i++) {\r\n    const dim = dims[i];\r\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\r\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\r\n    }\r\n    if (dim < 0) {\r\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\r\n    }\r\n    size *= dim;\r\n  }\r\n  return size;\r\n};\r\n\r\nexport class Tensor implements TensorInterface {\r\n  //#region constructors\r\n  constructor(type: TensorType, data: TensorDataType|readonly number[]|readonly boolean[], dims?: readonly number[]);\r\n  constructor(data: TensorDataType|readonly boolean[], dims?: readonly number[]);\r\n  constructor(\r\n      arg0: TensorType|TensorDataType|readonly boolean[], arg1?: TensorDataType|readonly number[]|readonly boolean[],\r\n      arg2?: readonly number[]) {\r\n    let type: TensorType;\r\n    let data: TensorDataType;\r\n    let dims: typeof arg1|typeof arg2;\r\n    // check whether arg0 is type or data\r\n    if (typeof arg0 === 'string') {\r\n      //\r\n      // Override: constructor(type, data, ...)\r\n      //\r\n      type = arg0;\r\n      dims = arg2;\r\n      if (arg0 === 'string') {\r\n        // string tensor\r\n        if (!Array.isArray(arg1)) {\r\n          throw new TypeError('A string tensor\\'s data must be a string array.');\r\n        }\r\n        // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\r\n        // error will be populated at inference\r\n        data = arg1;\r\n      } else {\r\n        // numeric tensor\r\n        const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\r\n        if (typedArrayConstructor === undefined) {\r\n          throw new TypeError(`Unsupported tensor type: ${arg0}.`);\r\n        }\r\n        if (Array.isArray(arg1)) {\r\n          // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\r\n          // incorrect results.\r\n          // 'typedArrayConstructor' should be one of the typed array prototype objects.\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          data = (typedArrayConstructor as any).from(arg1);\r\n        } else if (arg1 instanceof typedArrayConstructor) {\r\n          data = arg1;\r\n        } else {\r\n          throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\r\n        }\r\n      }\r\n    } else {\r\n      //\r\n      // Override: constructor(data, ...)\r\n      //\r\n      dims = arg1;\r\n      if (Array.isArray(arg0)) {\r\n        // only boolean[] and string[] is supported\r\n        if (arg0.length === 0) {\r\n          throw new TypeError('Tensor type cannot be inferred from an empty array.');\r\n        }\r\n        const firstElementType = typeof arg0[0];\r\n        if (firstElementType === 'string') {\r\n          type = 'string';\r\n          data = arg0;\r\n        } else if (firstElementType === 'boolean') {\r\n          type = 'bool';\r\n          // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\r\n          // wrong type. We use 'as any' to make it happy.\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          data = Uint8Array.from(arg0 as any[]);\r\n        } else {\r\n          throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\r\n        }\r\n      } else {\r\n        // get tensor type from TypedArray\r\n        const mappedType =\r\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor as SupportedTypedArrayConstructors);\r\n        if (mappedType === undefined) {\r\n          throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\r\n        }\r\n        type = mappedType;\r\n        data = arg0 as SupportedTypedArray;\r\n      }\r\n    }\r\n\r\n    // type and data is processed, now processing dims\r\n    if (dims === undefined) {\r\n      // assume 1-D tensor if dims omitted\r\n      dims = [data.length];\r\n    } else if (!Array.isArray(dims)) {\r\n      throw new TypeError('A tensor\\'s dims must be a number array');\r\n    }\r\n\r\n    // perform check\r\n    const size = calculateSize(dims);\r\n    if (size !== data.length) {\r\n      throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\r\n    }\r\n\r\n    this.dims = dims as readonly number[];\r\n    this.type = type;\r\n    this.data = data;\r\n    this.size = size;\r\n  }\r\n  //#endregion\r\n\r\n  //#region fields\r\n  readonly dims: readonly number[];\r\n  readonly type: TensorType;\r\n  readonly data: TensorDataType;\r\n  readonly size: number;\r\n  //#endregion\r\n\r\n  //#region tensor utilities\r\n  reshape(dims: readonly number[]): Tensor {\r\n    return new Tensor(this.type, this.data, dims);\r\n  }\r\n  //#endregion\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor as TensorImpl} from './tensor-impl';\r\nimport {TypedTensorUtils} from './tensor-utils';\r\n\r\n/* eslint-disable @typescript-eslint/no-redeclare */\r\n\r\n/**\r\n * represent a basic tensor with specified dimensions and data type.\r\n */\r\ninterface TypedTensorBase<T extends Tensor.Type> {\r\n  /**\r\n   * Get the dimensions of the tensor.\r\n   */\r\n  readonly dims: readonly number[];\r\n  /**\r\n   * Get the data type of the tensor.\r\n   */\r\n  readonly type: T;\r\n  /**\r\n   * Get the buffer data of the tensor.\r\n   */\r\n  readonly data: Tensor.DataTypeMap[T];\r\n}\r\n\r\nexport declare namespace Tensor {\r\n  interface DataTypeMap {\r\n    float32: Float32Array;\r\n    uint8: Uint8Array;\r\n    int8: Int8Array;\r\n    uint16: Uint16Array;\r\n    int16: Int16Array;\r\n    int32: Int32Array;\r\n    int64: BigInt64Array;\r\n    string: string[];\r\n    bool: Uint8Array;\r\n    float16: never;  // hold on using Uint16Array before we have a concrete solution for float 16\r\n    float64: Float64Array;\r\n    uint32: Uint32Array;\r\n    uint64: BigUint64Array;\r\n    // complex64: never;\r\n    // complex128: never;\r\n    // bfloat16: never;\r\n  }\r\n\r\n  interface ElementTypeMap {\r\n    float32: number;\r\n    uint8: number;\r\n    int8: number;\r\n    uint16: number;\r\n    int16: number;\r\n    int32: number;\r\n    int64: bigint;\r\n    string: string;\r\n    bool: boolean;\r\n    float16: never;  // hold on before we have a concret solution for float 16\r\n    float64: number;\r\n    uint32: number;\r\n    uint64: bigint;\r\n    // complex64: never;\r\n    // complex128: never;\r\n    // bfloat16: never;\r\n  }\r\n\r\n  type DataType = DataTypeMap[Type];\r\n  type ElementType = ElementTypeMap[Type];\r\n\r\n  /**\r\n   * represent the data type of a tensor\r\n   */\r\n  export type Type = keyof DataTypeMap;\r\n}\r\n\r\n/**\r\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\r\n */\r\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\r\n/**\r\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\r\n */\r\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\r\n\r\nexport interface TensorConstructor {\r\n  //#region specify element type\r\n  /**\r\n   * Construct a new string tensor object from the given type, data and dims.\r\n   *\r\n   * @param type - Specify the element type.\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(type: 'string', data: Tensor.DataTypeMap['string']|readonly string[],\r\n      dims?: readonly number[]): TypedTensor<'string'>;\r\n\r\n  /**\r\n   * Construct a new bool tensor object from the given type, data and dims.\r\n   *\r\n   * @param type - Specify the element type.\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(type: 'bool', data: Tensor.DataTypeMap['bool']|readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\r\n\r\n  /**\r\n   * Construct a new numeric tensor object from the given type, data and dims.\r\n   *\r\n   * @param type - Specify the element type.\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new<T extends Exclude<Tensor.Type, 'string'|'bool'>>(\r\n      type: T, data: Tensor.DataTypeMap[T]|readonly number[], dims?: readonly number[]): TypedTensor<T>;\r\n  //#endregion\r\n\r\n  //#region infer element types\r\n\r\n  /**\r\n   * Construct a new float32 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\r\n\r\n  /**\r\n   * Construct a new int8 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\r\n\r\n  /**\r\n   * Construct a new uint8 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\r\n\r\n  /**\r\n   * Construct a new uint16 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\r\n\r\n  /**\r\n   * Construct a new int16 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\r\n\r\n  /**\r\n   * Construct a new int32 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\r\n\r\n  /**\r\n   * Construct a new int64 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\r\n\r\n  /**\r\n   * Construct a new string tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\r\n\r\n  /**\r\n   * Construct a new bool tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\r\n\r\n  /**\r\n   * Construct a new float64 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\r\n\r\n  /**\r\n   * Construct a new uint32 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\r\n\r\n  /**\r\n   * Construct a new uint64 tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\r\n\r\n  //#endregion\r\n\r\n  //#region fall back to non-generic tensor type declaration\r\n\r\n  /**\r\n   * Construct a new tensor object from the given type, data and dims.\r\n   *\r\n   * @param type - Specify the element type.\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(type: Tensor.Type, data: Tensor.DataType|readonly number[]|readonly boolean[], dims?: readonly number[]): Tensor;\r\n\r\n  /**\r\n   * Construct a new tensor object from the given data and dims.\r\n   *\r\n   * @param data - Specify the tensor data\r\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\r\n   */\r\n  new(data: Tensor.DataType, dims?: readonly number[]): Tensor;\r\n  //#endregion\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const Tensor = TensorImpl as TensorConstructor;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\nimport {promisify} from 'util';\r\n\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\nimport {initializeWebAssembly} from './wasm/wasm-factory';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads < 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.ceil((numCpuLogicalCores || 1) / 2);\r\n  }\r\n  env.wasm.numThreads = Math.min(4, env.wasm.numThreads);\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initializeWebAssembly();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    let buffer: Uint8Array;\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof fetch === 'undefined') {\r\n        // node\r\n        buffer = await promisify(readFile)(pathOrBuffer);\r\n      } else {\r\n        // browser\r\n        const response = await fetch(pathOrBuffer);\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        buffer = new Uint8Array(arrayBuffer);\r\n      }\r\n    } else {\r\n      buffer = pathOrBuffer;\r\n    }\r\n\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    handler.loadModel(buffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend} from 'onnxruntime-common';\r\nimport {onnxjsBackend} from './backend-onnxjs';\r\nimport {wasmBackend} from './backend-wasm';\r\n\r\nregisterBackend('webgl', onnxjsBackend, 1);\r\nregisterBackend('wasm', wasmBackend, 2);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(\r\n            utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend(),\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName} from './utils';\r\nimport {generateShaderFuncNameFromInputSamplerNameAtOutCoords,} from './utils';\r\nimport {getCoordsDataType, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    this.context.programInfo.samplers.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.programInfo.inputLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xx, outputValue.yy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.programInfo.outputLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const layout = programInfo.inputLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\r\n    this.context = new GlslContext(glContext, programInfo);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {WebGLPack} from './ops/pack';\r\n\r\nimport {WebGLUint8Encode} from './ops/uint8-encode';\r\nimport {WebGLUnpack} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {Artifact, RunData, TextureData, TextureLayout, WebGLOperator} from './types';\r\nimport {getPackedShape} from './utils';\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  private unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, inputs);\r\n      if (!programInfo.name) {\r\n        programInfo.name = op.constructor?.name;\r\n      }\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\r\n    this.runProgram(artifact, runData);\r\n    return [runData.outputTextureData.tensor];\r\n  }\r\n\r\n  checkAndUpdateTextureForm(artifact: Artifact, runData: RunData) {\r\n    // pack/unpack inputs\r\n    for (let i = 0; i < runData.inputTextureDatas.length; ++i) {\r\n      const input = runData.inputTextureDatas[i];\r\n      if (input.isPacked && !artifact.programInfo.expectPackedInputs) {\r\n        runData.inputTextureDatas[i] = this.unpack(input);\r\n      } else if (!input.isPacked && artifact.programInfo.expectPackedInputs) {\r\n        runData.inputTextureDatas[i] = this.pack(input);\r\n      }\r\n    }\r\n  }\r\n  runProgram(artifact: Artifact, runData: RunData) {\r\n    this.checkAndUpdateTextureForm(artifact, runData);\r\n\r\n    // output should match\r\n    if (!!runData.outputTextureData.isPacked !== !!artifact.programInfo.expectPackedOutputs) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, runData);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout, isPacked = false) {\r\n    let td = this.getTextureData(tensor.dataId, isPacked);\r\n    if (!td) {\r\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\r\n      if (!layout) {\r\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\r\n      }\r\n      // if we don't find the texture data with specific pack mode in the cache, try with the different\r\n      // pack mode to see if the tensor is cached using that pack mode. If succeed, we can return this\r\n      // tensor data and later apply a pack/unpack op on this texture, no need to create a new one here.\r\n      td = this.getTextureData(tensor.dataId, !isPacked);\r\n      if (!td) {\r\n        if (isPacked) {\r\n          const unpackedTextureLayout = this.getOrCreateTextureLayout(tensor, 1, false, [], true);\r\n          const unpackedTextureData = this.createTextureData(\r\n              unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n          td = this.pack(unpackedTextureData);\r\n        } else {\r\n          td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n    } else {\r\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from the given data type and texture layout.\r\n   * Usage = Encoder.Usage.Default.\r\n   * @param dataType the tensor data type\r\n   */\r\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\r\n    return this.createTextureData(layout, dataType);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object, using the given texture.\r\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\r\n   * @param dataType the tensor data type\r\n   * @param texture the WebGLTexture object to share\r\n   * @param tensorId the tensor ID of the shared tensor data\r\n   */\r\n  createSharedTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId?: Tensor.Id): TextureData {\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData), undefined,\r\n                  undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ?\r\n        this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n  /**\r\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\r\n   */\r\n  getOrCreateTextureLayout(\r\n      tensor: Tensor, channels: 1|4 = 1, isPacked = false, unpackedShape?: readonly number[],\r\n      reverseWH = false): TextureLayout {\r\n    const td = this.getTextureData(tensor.dataId, isPacked);\r\n    if (td) {\r\n      return td;\r\n    }\r\n    return this.createTextureLayoutFromShape(\r\n        channels === 1 || isPacked ? tensor.dims : getPackedShape(tensor.dims), channels, unpackedShape,\r\n        isPacked || reverseWH ? {isPacked, reverseWH} : undefined);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureLayout object from shape.\r\n   */\r\n  createTextureLayoutFromShape(\r\n      shape: readonly number[], channels: 1|4 = 1, unpackedShape?: readonly number[],\r\n      prefs?: WidthHeightPrefs): TextureLayout {\r\n    const isPacked = !!(prefs && prefs.isPacked);\r\n    const [texWidth, texHeight] =\r\n        this.session.layoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n    let [width, height] = [texWidth, texHeight];\r\n    if (prefs && prefs.reverseWH) {\r\n      width = texHeight;\r\n      height = texWidth;\r\n    }\r\n    const rank = shape.length;\r\n    let inferredDims = shape.slice(0);\r\n    if (rank === 0) {\r\n      inferredDims = [1];\r\n    }\r\n    if (channels === 1) {\r\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n      unpackedShape = shape;\r\n    } else if (isPacked) {\r\n      if (channels !== 4) {\r\n        throw new Error('a packed texture must be 4-channel');\r\n      }\r\n      unpackedShape = shape;\r\n      if (rank > 0) {\r\n        inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n      }\r\n      if (rank > 1) {\r\n        inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n      }\r\n    } else if (!unpackedShape) {\r\n      throw new Error('Unpacked shape is needed when using channels > 1');\r\n    }\r\n    return {\r\n      width,\r\n      height,\r\n      channels,\r\n      isPacked,\r\n      shape: inferredDims,\r\n      strides: ShapeUtil.computeStrides(inferredDims),\r\n      unpackedShape,\r\n      reversedWH: (prefs && prefs.reverseWH)\r\n    };\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      const op = new WebGLUint8Encode();\r\n      const uint8TD = op.runInternal(this, textureData);\r\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const cachedId = this.unpack2packMap.get(input.tensor.dataId);\r\n    if (cachedId) {\r\n      return this.packedTextureDataCache.get(cachedId)!;\r\n    }\r\n    const key = `${input.shape}`;\r\n    let op = this.session.packOpCache.get(key);\r\n    if (!op) {\r\n      op = new WebGLPack();\r\n      this.session.packOpCache.set(key, op);\r\n    }\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\r\n    this.runProgram(artifact, runData);\r\n    this.unpack2packMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\r\n    return runData.outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const cachedId = this.pack2unpackMap.get(input.tensor.dataId);\r\n    if (cachedId) {\r\n      return this.unpackedTextureDataCache.get(cachedId)!;\r\n    }\r\n    // For unpacked kernel, cache it by using input's unpackedShape as cache key.\r\n    // Note that we need to use input.unpackedShape instead of input.shape here,\r\n    // as the shape infers the packed texture shape. Different unpackedShape can have the\r\n    // same packed texture shape. For example, for unpacked shape, both [2, 3] and\r\n    // [2, 4] has the same packed shape [1, 2], but those two shapes should have different\r\n    // unpack shaders.\r\n    const key = `${input.unpackedShape}`;\r\n    let op = this.session.unpackOpCache.get(key);\r\n    if (!op) {\r\n      op = new WebGLUnpack();\r\n      this.session.unpackOpCache.set(key, op);\r\n    }\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\r\n    this.runProgram(artifact, runData);\r\n    this.pack2unpackMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {WebGLClip} from './ops/clip';\r\nimport {WebGLConcat} from './ops/concat';\r\nimport {WebGLConv} from './ops/conv';\r\nimport {WebGLDepthToSpace} from './ops/depth-to-space';\r\nimport {WebGLDropout} from './ops/dropout';\r\nimport {WebGLElu} from './ops/elu';\r\nimport {WebGLFlatten} from './ops/flatten';\r\nimport {WebGLGather} from './ops/gather';\r\nimport {WebGLGemm} from './ops/gemm';\r\nimport {WebGLImageScaler} from './ops/image-scaler';\r\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\r\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\r\nimport {WebGLMatMul} from './ops/matmul';\r\nimport {WebGLPad} from './ops/pad';\r\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\r\nimport * as reduceOps from './ops/reduce';\r\nimport {WebGLReshape} from './ops/reshape';\r\nimport {WebGLResizePacked} from './ops/resize-packed';\r\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\r\nimport {WebGLSoftmax} from './ops/softmax';\r\nimport {WebGLSplit} from './ops/split';\r\nimport {WebGLSqueeze} from './ops/squeeze';\r\nimport {WebGLSum} from './ops/sum';\r\nimport {WebGLTile} from './ops/tile';\r\nimport {WebGLTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\r\nimport {WebGLUpsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\r\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\r\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\r\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\r\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\r\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\r\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\r\n  ['Clip', '', '6-10', () => new WebGLClip()],\r\n  ['Concat', '', '4+', () => new WebGLConcat()],\r\n  ['Conv', '', '1+', () => new WebGLConv()],\r\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\r\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\r\n  ['Dropout', '', '7+', () => new WebGLDropout()],\r\n  ['DepthToSpace', '', '1+', () => new WebGLDepthToSpace()],\r\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\r\n  ['Elu', '', '6+', () => new WebGLElu()],\r\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\r\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\r\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\r\n  ['Gather', '', '1+', () => new WebGLGather()],\r\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\r\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\r\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\r\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\r\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\r\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\r\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\r\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\r\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\r\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\r\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\r\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\r\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\r\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\r\n  ['Pad', '', '2-10', () => new WebGLPad()],\r\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\r\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\r\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\r\n  ['Reshape', '', '5+', () => new WebGLReshape()],\r\n  ['Resize', '', '10', () => new WebGLResizePacked(10)],\r\n  ['Resize', '', '11+', () => new WebGLResizePacked(11)],\r\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\r\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\r\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new WebGLSlice()],\r\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data\r\n  // is split. When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\r\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\r\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\r\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\r\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\r\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\r\n  ['Tile', '', '6+', () => new WebGLTile()],\r\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\r\n  ['Upsample', '', '7-8', () => new WebGLUpsample(7)],\r\n  ['Upsample', '', '9', () => new WebGLUpsample(9)],\r\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\r\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const scale = inputLayouts[1];\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\r\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\r\n      }`;\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n      shaderSource\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\r\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\r\n  private usePackedTexture?: boolean;\r\n\r\n  constructor(\r\n      typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction, opType?: string,\r\n      resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n    // TODO fix bcast in packed mode.\r\n    if (this.usePackedTexture === undefined) {\r\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\r\n    }\r\n\r\n    const inputLayouts = this.usePackedTexture ?\r\n        inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)) :\r\n        inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const ouputLayout = this.usePackedTexture ?\r\n        handler.createTextureLayoutFromShape(inputs[0].dims, 4, inputs[0].dims, {isPacked: true, reverseWH: true}) :\r\n        handler.createTextureLayoutFromShape(inputs[0].dims);\r\n\r\n    if (isBroadcast) {\r\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t perform binary op on the given tensors');\r\n      }\r\n      const outputRank = outputShape.length;\r\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n      const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n      const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n      // TODO: for packed tensors, we need to implement logic to caculate textCoords for broadcast tensor\r\n      const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\r\n    }`;\r\n      const outputLayout = this.usePackedTexture ?\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\r\n          handler.createTextureLayoutFromShape(outputShape);\r\n\r\n      return {\r\n        inputLayouts,\r\n        outputLayout,\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n        expectPackedInputs: this.usePackedTexture,\r\n        expectPackedOutputs: this.usePackedTexture\r\n      };\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${this.glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${this.glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n    if (this.usePackedTexture) {\r\n      return {\r\n        hasMain: true,\r\n        inputLayouts,\r\n        outputLayout: ouputLayout,\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n        expectPackedInputs: true,\r\n        expectPackedOutputs: true\r\n      };\r\n    } else {\r\n      return {\r\n        hasMain: true,\r\n        inputLayouts,\r\n        outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n      };\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = this.usePackedTexture ?\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true))) :\r\n        inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(\r\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLClip extends Clip implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      const float min = float(${this.min});\r\n      const float max = float(${this.max});\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(clamp(v, min, max));\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLPackedConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error('non concat dimensions must match');\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const coords = getChannels('coords', rank);\r\n    const dtype = getCoordsDataType(rank);\r\n    const unpackChannel = unpackFromChannel();\r\n\r\n    const shapes = inputs.map(i => i.dims);\r\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n    const channels = allGlChannels.slice(0, rank);\r\n    const offsets: number[] = new Array(shapes.length - 1);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n\r\n    offsets[0] = shapes[0][this.axis];\r\n    for (let i = 1; i < offsets.length; i++) {\r\n      offsets[i] = offsets[i - 1] + shapes[i][this.axis];\r\n    }\r\n\r\n    const channel = channels[this.axis];\r\n    const lastChannels = channels.slice(-2);\r\n    const allChannels = channels.join();\r\n\r\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n      return getChannel(\r\n          getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n      }`;\r\n    for (let i = 1; i < offsets.length; i++) {\r\n      const shift = offsets[i - 1];\r\n      getValueSnippet += `\r\n          if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n            return getChannel(\r\n              getX${i}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n          }`;\r\n    }\r\n    const lastIndex = offsets.length;\r\n    const shift = offsets[offsets.length - 1];\r\n    getValueSnippet += `\r\n          return getChannel(\r\n            getX${lastIndex}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\r\n            vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const shaderSource = `\r\n        ${unpackChannel}\r\n        float getValue(${channels.map(x => 'int ' + x)}) {\r\n          ${getValueSnippet}\r\n        }\r\n\r\n        void main() {\r\n          ${dtype} coords = getOutputCoords();\r\n          int lastDim = coords.${allGlChannels[rank - 1]};\r\n          coords.${allGlChannels[rank - 1]} = coords.${allGlChannels[rank - 2]};\r\n          coords.${allGlChannels[rank - 2]} = lastDim;\r\n\r\n          vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n          ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n          if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n            result.g = getValue(${coords});\r\n          }\r\n\r\n          ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n            result.a = getValue(${coords});\r\n          }\r\n\r\n          ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n              ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n            result.b = getValue(${coords});\r\n          }\r\n          ${glsl.output} = result;\r\n        }\r\n      `;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)),\r\n      outputLayout:\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\r\n      samplers,\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i], true));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates the snippet to shift a given channel in a list of channels by shift\r\n   *\r\n   * i.e: returns a string of the form 'x, y-[shift], z' where any one channel can\r\n   * have the shift applied.\r\n   */\r\n  protected getShiftedChannelsSnippet(channels: string[], channel: string, shift: number) {\r\n    const channelIdx = channels.indexOf(channel);\r\n    const res = channels.map((c, idx) => {\r\n      if (idx === channelIdx) {\r\n        return `${c} - ${shift}`;\r\n      } else {\r\n        return c;\r\n      }\r\n    });\r\n    return res.join();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nimport {WebGLPackedConcat} from './concat-packed';\r\n\r\n// We provide a wrapper class so that the kernel can switch between packed and unpacked depending on the inputs on the\r\n// fly.\r\nexport class WebGLConcat extends Concat implements WebGLOperator {\r\n  unpackedImpl: WebGLUnpackedConcat;\r\n  packedImpl: WebGLPackedConcat;\r\n  constructor() {\r\n    super();\r\n    this.unpackedImpl = new WebGLUnpackedConcat();\r\n    this.packedImpl = new WebGLPackedConcat();\r\n  }\r\n\r\n  // No need to call super since this class only serves as a wrapper.\r\n  initialize(attributes: Attribute): void {\r\n    this.unpackedImpl.initialize(attributes);\r\n    this.packedImpl.initialize(attributes);\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      return inferenceHandler.run(this.unpackedImpl, inputs);\r\n    }\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (handler.session.pack && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createProgramInfo(handler, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    if (handler.session.pack && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\r\n    }\r\n  }\r\n}\r\nexport class WebGLUnpackedConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error('non concat dimensions must match');\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n\r\n    let getTextureIndexWhereDataResidesMethod = '';\r\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n    if (inputs.length < 5) {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\r\n    } else {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\r\n    }\r\n\r\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    const shaderSource = `\r\n      ${fetchDataFromCorrectTextureMethod}\r\n      ${getValueFromArrayIndexMethod}\r\n      ${getTextureIndexWhereDataResidesMethod}\r\n      float process(int indices[${rank}]) {\r\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\r\n\r\n        if(textureIndex != 0) {\r\n          indices[${this.axis}] = indices[${\r\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\r\n        }\r\n\r\n        return fetchDataFromCorrectTexture(textureIndex, indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\r\n    let previousSum = 0;\r\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\r\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\r\n      sizeInConcatAxis[i] = previousSum;\r\n    }\r\n    const uniformData = {sizeInConcatAxis};\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData\r\n    };\r\n  }\r\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\r\n    return `int getTextureWhereDataResides(int index) {\r\n      for(int i=0; i<${numberOfTensors}; i++) {\r\n          if(index < int(sizeInConcatAxis[i])){\r\n              return i;\r\n          }\r\n        }\r\n      }`;\r\n  }\r\n\r\n  // TODO: Implement BinarySearch in GLSL\r\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\r\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\r\n  }\r\n\r\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\r\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n    for (let i = 0; i < numberOfTensors; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      } else if (i === numberOfTensors - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return _X${i}(indices); }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n    return codeLines.join('\\n');\r\n  }\r\n\r\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\r\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\r\n    for (let i = 0; i < arrayRank; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (index == ${i}) { return arr[${i}]; }`);\r\n      } else if (i === arrayRank - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return arr[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (index == ${i}) { return arr[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {assert, PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo} from '../types';\r\nimport {WebGLConv} from './conv';\r\nimport {WebGLIm2ColPacked} from './im2col-pack';\r\nimport {WebGLMatMulPacked} from './matmul-pack';\r\nimport {WebGLReshapePacked} from './reshape-packed';\r\n\r\nexport class WebGLConvPacked extends Conv {\r\n  protected artifacts: Artifact[];\r\n  protected programInfo: ProgramInfo[];\r\n  protected outputShape: number[];\r\n\r\n  private kernelReshape = new WebGLReshapePacked();\r\n  private im2col: WebGLIm2ColPacked;\r\n  private matmul = new WebGLMatMulPacked();\r\n  private outputReshape = new WebGLReshapePacked();\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      for (let i = 2; i < kshape.length; ++i) {\r\n        this.kernelShape.push(kshape[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n\r\n    if (!this.outputShape) {\r\n      this.outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    }\r\n    if (this.im2col === undefined) {\r\n      this.im2col = new WebGLIm2ColPacked(this.outputShape, kshape, this.dilations, this.pads, this.strides);\r\n    }\r\n    if (this.activation) {\r\n      const attributes = new Attribute(undefined);\r\n      attributes.set('__internal_activation', 'string', (this.activation));\r\n      this.matmul.initialize(attributes);\r\n    }\r\n    // shape for kernel reshape\r\n    const shape =\r\n        new Tensor([2], 'int32', undefined, undefined, new Int32Array([kshape[0], kshape[1] * kshape[2] * kshape[3]]));\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      this.programInfo = [];\r\n      this.programInfo[0] = this.im2col.createProgramInfo(inferenceHandler, [inputs[0], inputs[1]]);\r\n      this.artifacts[0] = programManager.build(this.programInfo[0]);\r\n\r\n      this.programInfo[1] = this.kernelReshape.createProgramInfo(inferenceHandler, [inputs[1], shape]);\r\n      this.artifacts[1] = programManager.build(this.programInfo[1]);\r\n    }\r\n\r\n    // run im2col\r\n    const runDataIm2col = this.im2col.createRunData(inferenceHandler, this.programInfo[0], [inputs[0], inputs[1]]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataIm2col);\r\n    programManager.run(this.artifacts[0], runDataIm2col);\r\n    const im2colOutput = runDataIm2col.outputTextureData.tensor;\r\n\r\n    // reshape kernel\r\n    const runDataKernelReshape =\r\n        this.kernelReshape.createRunData(inferenceHandler, this.programInfo[1], [inputs[1], shape]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[1], runDataKernelReshape);\r\n    programManager.run(this.artifacts[1], runDataKernelReshape);\r\n    const kernelReshaped = runDataKernelReshape.outputTextureData.tensor;\r\n\r\n    // run matmul\r\n    const hasBias = (inputs.length === 3);\r\n    assert(this.artifacts.length > 1, () => 'expect at least 2 artifacts created');\r\n    if (this.artifacts.length === 2) {\r\n      this.programInfo[2] = this.matmul.createProgramInfo(\r\n          inferenceHandler, hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\r\n      this.artifacts[2] = programManager.build(this.programInfo[2]);\r\n    }\r\n    const runDataMatmul = this.matmul.createRunData(\r\n        inferenceHandler, this.programInfo[2],\r\n        hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[2], runDataMatmul);\r\n    programManager.run(this.artifacts[2], runDataMatmul);\r\n    const matmulOutput = runDataMatmul.outputTextureData.tensor;\r\n\r\n    // reshape output\r\n    const outputShapeTensor = new Tensor(\r\n        [this.outputShape.length], 'int32', undefined, undefined,\r\n        new Int32Array([this.outputShape[0], this.outputShape[1], this.outputShape[2], this.outputShape[3]]));\r\n\r\n    assert(this.artifacts.length > 2, () => 'expect at least 3 artifacts created');\r\n    if (this.artifacts.length === 3) {\r\n      this.programInfo[3] = this.outputReshape.createProgramInfo(inferenceHandler, [matmulOutput, outputShapeTensor]);\r\n      this.artifacts[3] = programManager.build(this.programInfo[3]);\r\n    }\r\n    const runDataOutputReshape =\r\n        this.outputReshape.createRunData(inferenceHandler, this.programInfo[3], [matmulOutput, outputShapeTensor]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[3], runDataOutputReshape);\r\n    programManager.run(this.artifacts[3], runDataOutputReshape);\r\n    return [runDataOutputReshape.outputTextureData.tensor];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\nimport {WebGLContext} from '../webgl-context';\r\n\r\nimport {WebGLConvPacked} from './conv-pack';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nexport class WebGLConv extends Conv {\r\n  unpackedGroupedConvImpl: WebGLUnpackedGroupedConv;\r\n  unpackedConvImpl: WebGLUnpackedConv;\r\n  packedConvImpl: WebGLConvPacked;\r\n\r\n  constructor() {\r\n    super();\r\n    this.unpackedGroupedConvImpl = new WebGLUnpackedGroupedConv();\r\n    this.unpackedConvImpl = new WebGLUnpackedConv();\r\n    this.packedConvImpl = new WebGLConvPacked();\r\n  }\r\n\r\n  initialize(attributes: Attribute): void {\r\n    super.initialize(attributes);\r\n    this.unpackedGroupedConvImpl.initialize(attributes);\r\n    this.unpackedConvImpl.initialize(attributes);\r\n    this.packedConvImpl.initialize(attributes);\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const packMode = inferenceHandler.session.pack;\r\n    if (this.group > 1) {\r\n      return this.unpackedGroupedConvImpl.run(inferenceHandler, inputs);\r\n    } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1) {\r\n      return this.packedConvImpl.run(inferenceHandler, inputs);\r\n    } else {\r\n      return this.unpackedConvImpl.run(inferenceHandler, inputs);\r\n    }\r\n  }\r\n\r\n  static calcOutputShape(\r\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\r\n      strides: number[]): number[] {\r\n    const batchSize = inputShape[0];\r\n    const inputSpatialShape = inputShape.slice(2);\r\n    const spatialRank = inputSpatialShape.length;\r\n    const outChannels = kernelShape[0];\r\n    const kernelSpatialShape = kernelShape.slice(2);\r\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n    const outputSpatialShape =\r\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n    return outputShape;\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedGroupedConv extends Conv implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const hasBias = inputs.length > 2;\r\n    const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n    const xShape = inputs[0].dims.slice();\r\n    const wShape = inputs[1].dims.slice();\r\n    const outputChannelsPerGroup = wShape[0] / this.group;\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      for (let i = 2; i < wShape.length; ++i) {\r\n        this.kernelShape.push(wShape[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xShape, wShape, this.dilations, this.pads, this.strides);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n\r\n    const shaderSource = `\r\n    const ivec2 strides = ivec2(${this.strides[0]}, ${this.strides[1]});\r\n    const ivec2 pads = ivec2(${this.pads[0]}, ${this.pads[1]});\r\n    ${activationFunction}\r\n    void main() {\r\n      ivec4 coords = getOutputCoords();\r\n      int batch = coords.x;\r\n      int output_channel = coords.y;\r\n      ivec2 xRCCorner = coords.zw * strides - pads;\r\n      int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n      float value = 0.0;\r\n      for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n        int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n        for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n          int xHeight = xRCCorner.x + wHeight * ${this.dilations[0]};\r\n\r\n          if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n            continue;\r\n          }\r\n\r\n          for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n            int xWidth = xRCCorner.y + wWidth * ${this.dilations[1]};\r\n            if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n              continue;\r\n            }\r\n\r\n            float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n            float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n            value += xVal*wVal;\r\n          }\r\n        }\r\n      }\r\n      ${processBias}\r\n      ${applyActivation}\r\n      ${glsl.output} = vec4(value, .0, .0, .0);\r\n    }\r\n`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedConv extends Conv {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfoArray(inferenceHandler, inputs);\r\n      for (let i = 0; i < programInfos.length; ++i) {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const runDataArray = this.createRunDataArray(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataArray[0]);\r\n    programManager.run(this.artifacts[0], runDataArray[0]);\r\n    programManager.run(this.artifacts[1], runDataArray[1]);\r\n    return [runDataArray[1].outputTextureData.tensor];\r\n  }\r\n  createProgramInfoArray(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\r\n    const dotProductProgramInfo =\r\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\r\n    return [im2colProgramInfo, dotProductProgramInfo];\r\n  }\r\n  createRunDataArray(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]):\r\n      RunData[] {\r\n    const k = inputs[1];\r\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\r\n    let kTD = inferenceHandler.getTextureData(k.dataId);\r\n    if (!kTD) {\r\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\r\n      const newKernelData =\r\n          WebGLUnpackedConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\r\n      // hack: should use graph transformer to rewrite initializer K\r\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\r\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\r\n    }\r\n    const runtDataIm2Col = {\r\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\r\n    if (b) {\r\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\r\n    }\r\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\r\n    const runDataDotProduct = {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: outputTD,\r\n      uniformData: {},\r\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\r\n        const gl = glContext.gl;\r\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\r\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\r\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\r\n        let blend = false;\r\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\r\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\r\n          if (k === sharedDimReadSize) {\r\n            blend = true;\r\n            gl.enable(gl.BLEND);\r\n            glContext.checkError();\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            glContext.checkError();\r\n            gl.blendFunc(gl.ONE, gl.ONE);\r\n            glContext.checkError();\r\n          }\r\n\r\n          gl.uniform1i(sharedDimOffsetLocation, k);\r\n          glContext.checkError();\r\n          glContext.draw();\r\n        }\r\n\r\n        if (blend) {\r\n          gl.disable(gl.BLEND);\r\n          glContext.checkError();\r\n        }\r\n      }\r\n    };\r\n    return [runtDataIm2Col, runDataDotProduct];\r\n  }\r\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\r\n      ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n\r\n    const rank = outputShape.length;\r\n    const im2colDims = WebGLUnpackedConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\r\n\r\n    const shaderSource = `\r\n      const int XC = ${xshape[1]};\r\n      const int XH = ${xshape[2]};\r\n      const int XW = ${xshape[3]};\r\n      const int KH = ${this.kernelShape[0]};\r\n      const int KW = ${this.kernelShape[1]};\r\n      const int dilationH = ${this.dilations[0]};\r\n      const int dilationW = ${this.dilations[1]};\r\n      const int strideH = ${this.strides[0]};\r\n      const int strideW = ${this.strides[1]};\r\n      const int padH = ${this.pads[0]};\r\n      const int padW = ${this.pads[1]};\r\n      const int KHKW = KH*KW;\r\n      const int XCKHKW = XC * KHKW;\r\n      const int outputChannels = 4;\r\n      vec4 process(int indices[${rank}]) {\r\n        int b  = indices[0]; // batch size\r\n        int oh = indices[1] * strideH - padH; //output height\r\n        int ow = indices[2] * strideW - padW; //output width\r\n        int p = indices[3] * outputChannels; //patch\r\n        vec4 value = vec4(0.0);\r\n        for(int i=0; i < outputChannels; ++i) {\r\n          if(p < XCKHKW) {\r\n            int patchC = p / KHKW;\r\n            int patchH = (p - patchC*KHKW) / KW;\r\n            int patchW = (p - patchC*KHKW) - patchH * KW;\r\n            int xh2 = oh + patchH * dilationH;\r\n            int xw2 = ow + patchW * dilationW;\r\n            int x[${xshape.length}];\r\n            x[0] = b;\r\n            x[1] = patchC;\r\n            x[2] = xh2;\r\n            x[3] = xw2;\r\n            if(xh2 >= 0 &&\r\n                xh2 < XH &&\r\n                xw2 >= 0 &&\r\n                xw2 < XW) {\r\n              value[i] = _X(x);\r\n            }\r\n          }\r\n          ++p;\r\n        }\r\n        return value;\r\n      }\r\n      `;\r\n    return {\r\n      name: 'Im2Col',\r\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createDotProductProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\r\n      outputShape: number[]): ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\r\n\r\n    let bLayout: TextureLayout|undefined;\r\n    const rank = outputShape.length;\r\n\r\n    const inputLayouts = [im2colLayout, kLayout];\r\n    if (inputs.length === 3) {\r\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\r\n      inputLayouts.push(bLayout);\r\n    }\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\r\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n    const sharedDim = im2colLayout.shape[3];\r\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported && !this.activation;\r\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\r\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\r\n        sharedDim;\r\n    const samplers = ['Im2Col', 'K'];\r\n    if (inputs.length === 3) {\r\n      samplers.push('B');\r\n    }\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${activationFunction}\r\n    float process(int indices[${rank}]) {\r\n      int b[1];\r\n      b[0] = indices[1];\r\n      int im2col[${im2colLayout.shape.length}];\r\n      im2col[0] = indices[0];\r\n      im2col[1] = indices[2];\r\n      im2col[2] = indices[3];\r\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\r\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\r\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\r\n      float value = sharedDimOffset == 0 ? ${initValue} : 0.0;\r\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\r\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\r\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\r\n        value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n        ++im2colOffset;\r\n        ++kernelOffset;\r\n      }\r\n      ${applyActivation}\r\n      return value;\r\n    }`;\r\n    return {\r\n      name: 'dotProduct',\r\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\r\n      outputLayout,\r\n      shaderSource,\r\n      samplers,\r\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\r\n      params: {sharedDim, sharedDimReadSize}\r\n    };\r\n  }\r\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\r\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\r\n      return kernel;\r\n    }\r\n    const numFeatureMaps = shape[0];\r\n    const oldRowSize = shape[1] * shape[2] * shape[3];\r\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n    const newSize = numFeatureMaps * newRowSize;\r\n    const buffer = new Float32Array(newSize);\r\n    for (let f = 0; f < numFeatureMaps; ++f) {\r\n      const oldOffset = f * oldRowSize;\r\n      const newOffset = f * newRowSize + f % group * oldRowSize;\r\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n    }\r\n    return buffer;\r\n  }\r\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\r\n    return [\r\n      outputShape[0], outputShape[2], outputShape[3],\r\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\r\n    ];\r\n  }\r\n\r\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\r\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\r\n      return sharedDim;\r\n    }\r\n    return preferredBatchSize;\r\n  }\r\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\r\n    const preferredRowCount = 64;\r\n    const preferredColCount = 64;\r\n    if (outputLayout.height < preferredRowCount) {\r\n      return undefined;\r\n    }\r\n    return [preferredColCount, preferredRowCount];\r\n  }\r\n  protected artifacts: Artifact[];\r\n  protected readSize = 8;\r\n  protected blockSize = 64;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {DepthToSpace} from '../../../ops/depth-to-space';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nimport {reshape} from './reshape';\r\nimport {WebGLTranspose} from './transpose';\r\n\r\nexport class WebGLDepthToSpace extends DepthToSpace {\r\n  protected transposeProgramInfo: ProgramInfo;\r\n\r\n  protected transposeArtifact: Artifact;\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    const transposePerm = this.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n    const firstReshapeShape = this.mode === 'DCR' ?\r\n        [\r\n          inputs[0].dims[0], this.blocksize, this.blocksize, inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2],\r\n          inputs[0].dims[3]\r\n        ] :\r\n        [\r\n          inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, this.blocksize, this.blocksize, inputs[0].dims[2],\r\n          inputs[0].dims[3]\r\n        ];\r\n\r\n    const transpose = new WebGLTranspose();\r\n    const attributes = new Attribute(undefined);\r\n    attributes.set('perm', 'ints', transposePerm);\r\n    transpose.initialize(attributes);\r\n\r\n    // First reshape\r\n\r\n    const firstReshapedTensor = reshape(inferenceHandler, inputs[0], firstReshapeShape);\r\n\r\n    // transpose\r\n    if (!this.transposeProgramInfo) {\r\n      this.transposeProgramInfo = transpose.createProgramInfo(inferenceHandler, [firstReshapedTensor]);\r\n      this.transposeArtifact = programManager.build(this.transposeProgramInfo);\r\n    }\r\n    const runDataTranspose =\r\n        transpose.createRunData(inferenceHandler, this.transposeProgramInfo, [firstReshapedTensor]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.transposeArtifact, runDataTranspose);\r\n    programManager.run(this.transposeArtifact, runDataTranspose);\r\n    const transposeOutput = runDataTranspose.outputTextureData.tensor;\r\n\r\n    // Second reshape\r\n    const result = reshape(inferenceHandler, transposeOutput, [\r\n      inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2] * this.blocksize,\r\n      inputs[0].dims[3] * this.blocksize\r\n    ]);\r\n    return [result];\r\n  }\r\n\r\n  protected getOutShape(input: Tensor): number[] {\r\n    const batchSize = input.dims[0];\r\n    const inputDepth = input.dims[1];\r\n    const inputHeight = input.dims[2];\r\n    const inputWidth = input.dims[3];\r\n    if (inputDepth % (this.blocksizeSqr) !== 0) {\r\n      throw new Error('Input depth must be divisible by squared blocksize.');\r\n    }\r\n    const outputDepth = inputDepth / this.blocksizeSqr;\r\n    const outputHeight = inputHeight * this.blocksize;\r\n    const outputWidth = inputWidth * this.blocksize;\r\n    return [batchSize, outputDepth, outputHeight, outputWidth];\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLDropout extends Dropout implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.testMode) {\r\n      return [inputs[0]];\r\n    }\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n  createProgramInfo(_handler: WebGLInferenceHandler, _inputs: Tensor[]): ProgramInfo {\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n  createRunData(_handler: WebGLInferenceHandler, _programInfo: ProgramInfo, _inputs: Tensor[]): RunData {\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Elu} from '../../../ops/elu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLElu extends Elu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLFlatten extends Flatten {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\r\n\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport function getActicationSnippet(activation: string) {\r\n  let activationFunction = '';\r\n  let activationName = '';\r\n  switch (activation) {\r\n    case 'Relu':\r\n      activationName = glslRelu().name;\r\n      activationFunction = glslRelu().body;\r\n      break;\r\n    case 'Sigmoid':\r\n      activationName = glslSigmoid().name;\r\n      activationFunction = glslSigmoid().body;\r\n      break;\r\n    default:\r\n      // TODO: adding other activations that can be fused.\r\n      activationName = '';\r\n      activationFunction = '';\r\n  }\r\n  const applyActivation = activation ? `\r\n  value = ${activationName}(value);` :\r\n                                       '';\r\n  return {activationFunction, applyActivation};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGather extends Gather implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const indexDataShape = inputs[1].dims.slice();\r\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const indexCopyOps: string[] = [];\r\n    for (let i = 0; i < outputShape.length; i++) {\r\n      // outputShape is divided into three parts: A, B, C\r\n      // |0        axis|  axis + indexDataShape.length |          end|\r\n      // |     A       |             B                 |      C      |\r\n      //\r\n      // inputIdx: [A, inputs[1][B], C]\r\n      if (i < axis) {  // A\r\n        outputShape[i] = inputShape[i];\r\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n      } else {\r\n        if (i < axis + indexDataShape.length) {  // B\r\n          outputShape[i] = indexDataShape[i - axis];\r\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n        } else {                                                       // C\r\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const orank = outputShape.length || 1;\r\n    const irank = inputShape.length;\r\n    const iDrank = indexDataShape.length || 1;\r\n    const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGemm extends Gemm implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims.slice();\r\n    const bShape = inputs[1].dims.slice();\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n    const oShape = [M, N];\r\n    if (!oShape) {\r\n      throw new Error('Can\\'t use gemm on the given tensors');\r\n    }\r\n    let sharedDim = aShape[aShape.length - 1];\r\n    let line = '';\r\n    if (this.transA) {\r\n      sharedDim = aShape[0];\r\n    }\r\n    if (this.transA && this.transB) {\r\n      line = 'value += _A_T(a) * _B_T(b);';\r\n    } else if (this.transA && !this.transB) {\r\n      line = 'value += _A_T(a) * _B(b);';\r\n    } else if (!this.transA && this.transB) {\r\n      line = 'value += _A(a) * _B_T(b);';\r\n    } else if (!this.transA && !this.transB) {\r\n      line = 'value += _A(a) * _B(b);';\r\n    }\r\n    const rank = oShape.length;\r\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n    const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n    const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\r\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLIm2ColPacked implements WebGLOperator {\r\n  protected convOutputShape: number[];\r\n  protected kernelShape: number[];\r\n  protected dilations: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n\r\n  constructor(\r\n      convOutputShape: number[], kernelShape: number[], dilations: number[], pads: number[], strides: number[]) {\r\n    this.convOutputShape = convOutputShape;\r\n    this.kernelShape = kernelShape;\r\n    this.dilations = dilations;\r\n    this.pads = pads;\r\n    this.strides = strides;\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 2) {\r\n      throw new Error('Im2Col kernel should have two input tensors');\r\n    }\r\n\r\n    const xshape = inputs[0].dims.slice();\r\n    const wshape = inputs[1].dims.slice();\r\n    const rowDim = 2;\r\n    const colDim = 3;\r\n    const rank = this.convOutputShape.length;\r\n    const im2colShape = [wshape[1] * wshape[2] * wshape[3], this.convOutputShape[2] * this.convOutputShape[3]];\r\n    const kernelSize = wshape[2] * wshape[3];\r\n    const unpackChannel = unpackFromChannel();\r\n    let unrolled = '';\r\n\r\n    for (let row = 0; row <= 1; row++) {\r\n      for (let col = 0; col <= 1; col++) {\r\n        unrolled += `\r\n          blockIndex = rc.x + ${col};\r\n          pos = rc.y + ${row};\r\n\r\n          if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n            offsetY = int(blockIndex / (${this.convOutputShape[rank - 1]})) * ${this.strides[0]} - ${this.pads[0]};\r\n            d0 = offsetY + ${this.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n            if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n              offsetX = imod(blockIndex, ${this.convOutputShape[rank - 1]}) * ${this.strides[1]} - ${this.pads[1]};\r\n              d1 = offsetX + ${this.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n              if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                ch = int(float(pos)/ ${kernelSize}.);\r\n                  innerDims = vec2(d0, d1);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(0, ch, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n              }\r\n            }\r\n          }\r\n\r\n        `;\r\n      }\r\n    }\r\n\r\n    const shaderSource = `\r\n    ${unpackChannel}\r\n\r\n    void main() {\r\n      ivec2 rc = getOutputCoords();\r\n        vec4 result = vec4(0.0);\r\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n        vec2 innerDims;\r\n        ${unrolled}\r\n        outputColor = result;\r\n    }\r\n          `;\r\n    return {\r\n      name: 'WebGLIm2ColPacked',\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(inputs[0], 4, true, xshape, true)],\r\n      outputLayout:\r\n          inferenceHandler.createTextureLayoutFromShape(im2colShape, 4, im2colShape, {isPacked: true, reverseWH: true}),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs =\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\r\n    const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['X'],\r\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'bias': this.bias, 'scale': this.scale}\r\n    };\r\n  }\r\n  private createGetBiasMethod(numChannels: number): string {\r\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (channel == ${i}) { return bias[${i}]; }`);\r\n      } else if (i === numChannels - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return bias[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (channel == ${i}) { return bias[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((programInfo) => {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (!super.checkInputTypes(inputs)) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      // currently webgl implementation only support 4-D input.\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\r\n    const xDims = xLayout.shape;\r\n    const channel = xDims[1];\r\n    const channelSize = xDims[2] * xDims[3];\r\n    const outputShape = [xDims[0], channel];\r\n    const outputUnpackedShape = [xDims[0], channel * 4];\r\n\r\n    const shaderSource = `\r\n    vec4 process(int[2] indices) {\r\n      vec4 v = vec4(0.0);\r\n      int a[4];\r\n      a[0] = indices[0];\r\n      a[1] = indices[1];\r\n      float temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += x;\r\n        }\r\n      }\r\n      float mean = temp / float(${channelSize});\r\n      temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += (x - mean) * (x - mean);\r\n        }\r\n      }\r\n      v.r = mean;\r\n      v.g = temp / float(${channelSize});\r\n\r\n      return v;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\r\n      samplers: ['X'],\r\n      shaderSource,\r\n      name: 'MeanAndVariance',\r\n    };\r\n  }\r\n\r\n  createComputOutputProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\r\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    vec4 get_MeanAndVariance(int[2] mv) {\r\n      int offset = indicesToOffset_MeanAndVariance(mv);\r\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\r\n      return ${glsl.texture2D}(MeanAndVariance, coords);\r\n    }\r\n\r\n    float process(int[4] indices) {\r\n\r\n          int mv[2];\r\n          mv[0] = indices[0];\r\n          mv[1] = indices[1];\r\n          vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n          float mean = mean_and_variance.r;\r\n          float variance = mean_and_variance.g;\r\n\r\n          int sb[1];\r\n          sb[0] = indices[1];\r\n          float scale = _Scale(sb);\r\n          float b = _B(sb);\r\n\r\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\r\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n      variables: [{name: 'epsilon', type: 'float'}],\r\n      shaderSource,\r\n      name: 'ComputOutput',\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\r\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\r\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\r\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\r\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\r\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\r\n      uniformData: {'epsilon': this.epsilon}\r\n    });\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {LeakyRelu} from '../../../ops/leaky-relu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\r\n      }\r\n      `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nexport class WebGLMatMulPacked extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const hasBias = inputs.length > 2;\r\n    const processBias = hasBias ? 'result += getBiasAtOutCoords();' : '';\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n    const aRank = aShape.length;\r\n    const bRank = bShape.length;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const coordsDataType = getCoordsDataType(outputShape.length);\r\n    const outRank = outputShape.length;\r\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n    const shaderSource = `\r\n      ${activationFunction}\r\n      void main() {\r\n        ${coordsDataType} rc = getOutputCoords();\r\n        int lastDim = rc.${allGlChannels[outRank - 1]};\r\n        rc.${allGlChannels[outRank - 1]} = rc.${allGlChannels[outRank - 2]};\r\n        rc.${allGlChannels[outRank - 2]} = lastDim;\r\n\r\n        vec4 result = vec4(0);\r\n        for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n          vec4 a = getA(${getA(allGlChannels, aRank)});\r\n          vec4 b = getB(${getB(allGlChannels, bRank)});\r\n          result += (a.rrbb * b.rgrg);\r\n          result += (a.ggaa * b.baba);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        ${glsl.output} = result;\r\n      }`;\r\n    return {\r\n      name: 'WebGLMatMulPacked',\r\n      inputLayouts: inputs.map((t, i) => handler.getOrCreateTextureLayout(t, 4, true, inputs[i].dims, true)),\r\n      outputLayout:\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\r\n      samplers: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs =\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i<<1';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i<<1, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {WebGLMatMulPacked} from './matmul-pack';\r\n\r\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\r\n  private usePackedTexture?: boolean;\r\n\r\n  packedImpl: WebGLMatMulPacked;\r\n  unpackedImpl: WebGLUnpackedMatMul;\r\n  constructor() {\r\n    super();\r\n    this.packedImpl = new WebGLMatMulPacked();\r\n    this.unpackedImpl = new WebGLUnpackedMatMul();\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.usePackedTexture === undefined) {\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      this.usePackedTexture = !isBroadcast && inferenceHandler.session.pack;\r\n    }\r\n\r\n    if (this.usePackedTexture) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      return inferenceHandler.run(this.unpackedImpl, inputs);\r\n    }\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (this.usePackedTexture === undefined) {\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\r\n    }\r\n\r\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createProgramInfo(handler, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\r\n    }\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedMatMul extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const rank = outputShape.length;\r\n    const arank = aShape.length;\r\n    const brank = bShape.length;\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${arank}];\r\n          int b[${brank}];\r\n          bcastMatmulIndices_A(indices, a);\r\n          bcastMatmulIndices_B(indices, b);\r\n\r\n          float value;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${arank - 1}] = k;\r\n              b[${brank - 2}] = k;\r\n              value += _A(a) * _B(b);\r\n          }\r\n          return value;\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nexport class WebGLPack implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 1) {\r\n      throw new Error('Pack kernel should have input tensor count to 1.');\r\n    }\r\n\r\n    const inputShape = inputs[0].dims;\r\n\r\n    const outputLayout =\r\n        handler.createTextureLayoutFromShape(inputShape, 4, inputShape, {isPacked: true, reverseWH: true});\r\n    const outputShape = outputLayout.shape;\r\n    const inputRank = inputShape.length;\r\n    const outputRank = outputShape.length;\r\n\r\n    const coordsDataType = getCoordsDataType(outputRank);\r\n    const channels = getChannels('rc', outputRank);\r\n    const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n    let reversedInputWH;\r\n    if (inputRank === 0) {\r\n      reversedInputWH = [1, 1];\r\n    } else if (inputRank === 1) {\r\n      reversedInputWH = [inputShape[0], 1];\r\n    } else {\r\n      reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n    }\r\n    const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n    const output = getOutput(inputShape, channels);\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n\r\n    return {\r\n      name: 'WebGLPack',\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)],\r\n      outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: false,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLPad extends Pad implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\r\n    const rank = outputShape.length;\r\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const padFunction = getPadFunction(\r\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\r\n    const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [alayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nexport function getPadFunction(\r\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\r\n  switch (mode) {\r\n    case 'constant':\r\n      return getPadConstant(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\r\n    case 'reflect':\r\n      return getPadReflect(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    case 'edge':\r\n      return getPadEdge(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n}\r\nfunction getPadConstant(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[], value: number) {\r\n  const rank = shape.length;\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n          k = m[${i}] - ${pads[i]};\r\n          if (k < 0)  return constant;\r\n          if (k >= ${shape[i]}) return constant;\r\n          offset += k * ${strides[i]};\r\n          `;\r\n  }\r\n  return `\r\n        float pad${name}(int m[${rank}]) {\r\n          const float constant = float(${value});\r\n          int offset = 0;\r\n          int k = 0;\r\n          ${block}\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n}\r\nfunction getPadReflect(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n  }\r\n  return `\r\n      float pad${name}(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n        return value;\r\n      }\r\n      `;\r\n}\r\nfunction getPadEdge(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n      k = m[${i}] - ${pads[i]};\r\n      if (k < 0)  k = 0;\r\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n      offset += k * ${strides[i]};\r\n      `;\r\n  }\r\n  return `\r\n    float pad${name}(int m[${rank}]) {\r\n      int offset = 0;\r\n      int k = 0;\r\n      ${block}\r\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n      return value;\r\n    }\r\n    `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createAveragePoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const op1 = 'value += _X(x);';\r\n  let op2 = '';\r\n  if (countIncludePad) {\r\n    op2 += `value /= float(${kernelSize});`;\r\n  } else {\r\n    op2 += `value /= float(${kernelSize} - pad);`;\r\n  }\r\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\r\n  const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createMaxPoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const op1 = `\r\n              value = max(_X(x), value);\r\n      `;\r\n  const op2 = '';\r\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\r\n  const shaderSource = `\r\n    ${poolingCode}\r\n  `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function generatePoolingCode(\r\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\r\n    startVal: string): string {\r\n  const inputDims = x.shape;\r\n  const rank = x.shape.length;\r\n  if (kernelShape.length <= 2) {\r\n    const kw = kernelShape[kernelShape.length - 1];\r\n    const sw = strides[strides.length - 1];\r\n    const pwStart = pads[pads.length / 2 - 1];\r\n    const pwEnd = pads[pads.length - 1];\r\n    const dimW = inputDims[rank - 1];\r\n    let codeW = '';\r\n    let codeH = '';\r\n    let codeHEnd = '';\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n                    pad++;\r\n                    continue;\r\n                  }\r\n                  ${op1}\r\n                }`;\r\n    } else {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  ${op1}\r\n                }`;\r\n    }\r\n\r\n    if (kernelShape.length === 2) {\r\n      const kh = kernelShape[kernelShape.length - 2];\r\n      const sh = strides[strides.length - 2];\r\n      const phStart = pads[pads.length / 2 - 2];\r\n      const phEnd = pads[pads.length - 2];\r\n      const dimH = inputDims[rank - 2];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n              for (int j = 0; j < ${kh}; j++) {\r\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                  pad+= ${kw};\r\n                  continue;\r\n                }\r\n            `;\r\n      } else {\r\n        codeH = `\r\n                for (int j = 0; j < ${kh}; j++) {\r\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            float process(int indices[${rank}]) {\r\n              int x[${rank}];\r\n              copyVec(indices, x);\r\n\r\n              float value = ${startVal};\r\n              int pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n              return value;\r\n            }\r\n          `;\r\n    return poolingCode;\r\n  } else {\r\n    const kernelSize = ShapeUtil.size(kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = pads.length;\r\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n    const copyInputDims = copyArray(inputDims, 'inputDims');\r\n    const copyPads = copyArray(pads, 'pads');\r\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n    const copyStrides = copyArray(strides, 'strides');\r\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = '';\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (x[j] >= inputDims[j] || x[j] < 0) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n                  }\r\n                  ${op1}`;\r\n    }\r\n    const poolingCode = `\r\n            ${offsetToIndicesFunction}\r\n            float process(int indices[${rank}]) {\r\n                int x[${rank}];\r\n                copyVec(indices, x);\r\n                int offset[${stridesRank}];\r\n                int pads[${padsRank}];\r\n                int inputDims[${rank}];\r\n                int kernelStrides[${stridesRank}];\r\n                int strides[${stridesRank}];\r\n                ${copyPads}\r\n                ${copyInputDims}\r\n                ${copyStrides}\r\n                ${copyKernelStrides}\r\n\r\n                float value = ${startVal};\r\n                int pad = 0;\r\n                bool isPad = false;\r\n                for (int i = 0; i < ${kernelSize}; i++) {\r\n                    offsetToIndices(i, kernelStrides, offset);\r\n                    isPad = false;\r\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n                      ${padCode}\r\n                }\r\n                ${op2}\r\n\r\n                return value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n}\r\n\r\nexport function copyArray(array: readonly number[], arrayName: string): string {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n}\r\n\r\nexport function offsetToIndices(rank: number): string {\r\n  return `\r\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n      if (${rank} == 0) {\r\n        return;\r\n      }\r\n      for (int i = 0; i < ${rank} - 1; ++i) {\r\n        indices[i] = offset / strides[i];\r\n        offset -= indices[i] * strides[i];\r\n      }\r\n      indices[${rank} - 1] = offset;\r\n    }`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\r\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape: number[] = [];\r\n    const iRank = inputs[0].dims.length || 1;\r\n\r\n    const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\r\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\r\n    let reduceOps = ops[1];\r\n\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      // if this axis is reduced\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        if (this.keepDims) {\r\n          outputShape.push(1);\r\n        }  // else { remove the axis from outputShape; }\r\n\r\n        // loop over the d-th axis\r\n        reduceOps = `\r\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n          inputIdx[${k}] = j${k};\r\n          ${reduceOps}\r\n        }\r\n        `;\r\n      } else {\r\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n        outputShape.push(inputs[0].dims[k]);\r\n      }\r\n    }\r\n\r\n    const oRank = outputShape.length || 1;\r\n\r\n    const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSum extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMean extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    let size = 1.0;\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        size *= inputs[0].dims[k];\r\n      }\r\n    }\r\n\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMax extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMin extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceProd extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureData, WebGLOperator} from '../types';\r\nimport {TextureLayout} from '../types';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLReshapePacked extends Reshape implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 2) {\r\n      throw new Error('resize kernel should have input tensor count to 2.');\r\n    }\r\n\r\n    // For packed reshape, we need to re-arrange texel data for output shape.\r\n    // Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n    // for the reshaped new tensor, we just need to re-arrange the last h and\r\n    // w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n    // first convert it to 3D by collapsing other dimension to batch dim, then\r\n    // process with the last two dimensions.\r\n    // Note: we only need the shape tensor to calculate output shape, so the\r\n    // content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n    // TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n    // the same between input shape and output shape, the packed reshape can be\r\n    // treated as no-op.\r\n    // TODO: the implementation is a bit complicated due to the fact tensor shape is\r\n    // immutable once the tensor is created, plus the tensor shape has a 1-to-1\r\n    // mapping with texture layout. In the future, we may consider relaxing this\r\n    // assumption.\r\n\r\n    const originInputShape = inputs[0].dims;\r\n    this.inputShape3D = processDims3D(inputs[0].dims);\r\n    let inputLayout: TextureLayout;\r\n    inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, originInputShape, true);\r\n    if (originInputShape.length !== 3) {\r\n      const originalInputLayout = inputLayout;\r\n      // if originShape is not a 3D shape, create texture layout from the processed shape.\r\n      inputLayout = handler.createTextureLayoutFromShape(\r\n          this.inputShape3D, 4, this.inputShape3D, {isPacked: true, reverseWH: true});\r\n      // if the processed input shape produces texture layout differnt from the original\r\n      // one, the run data has to use the processed (3D) input shape later.\r\n      this.needSqueezeInputData =\r\n          (inputLayout.height !== originalInputLayout.height) || (inputLayout.width !== originalInputLayout.width);\r\n    }\r\n\r\n    this.outputShape = ShapeUtil.calculateReshapedDims(originInputShape, inputs[1].integerData);\r\n    const squeezedOutputShape = processDims3D(this.outputShape);\r\n\r\n    this.outputLayout = handler.createTextureLayoutFromShape(\r\n        squeezedOutputShape, 4, squeezedOutputShape, {isPacked: true, reverseWH: true});\r\n\r\n    let mainLoop = '';\r\n    for (let i = 0; i < 4; i++) {\r\n      let outputCoords = '';\r\n      switch (i) {\r\n        case 0:\r\n          outputCoords = 'outputCoords = rc;';\r\n          break;\r\n        case 1:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n          break;\r\n        case 2:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n          break;\r\n        case 3:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n          break;\r\n        default:\r\n          throw new Error();\r\n      }\r\n\r\n      mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const shaderSource = `\r\n      ${getReshapedInputCoords(this.inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n    return {\r\n      name: 'WebGLReshapePacked',\r\n      inputLayouts: [inputLayout],\r\n      outputLayout: this.outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    let inputTDs: [TextureData];\r\n    const originalInputLayout = handler.getOrCreateTextureLayout(inputs[0], 1, false, [], false);\r\n    const originalInputTD = handler.getOrCreateTextureData(inputs[0], originalInputLayout, false);\r\n\r\n    if (this.needSqueezeInputData) {\r\n      const squeezedInputLayout: TextureLayout = {\r\n        channels: 1,\r\n        height: originalInputLayout.height,\r\n        width: originalInputLayout.width,\r\n        shape: this.inputShape3D,\r\n        strides: ShapeUtil.computeStrides(this.inputShape3D),\r\n        unpackedShape: this.inputShape3D,\r\n      };\r\n      const squeezedInputTD =\r\n          handler.createSharedTextureData(squeezedInputLayout, inputs[0].type, originalInputTD.texture);\r\n      inputTDs = [squeezedInputTD];\r\n\r\n    } else {\r\n      inputTDs = [originalInputTD];\r\n    }\r\n    let outputLayout = this.outputLayout;\r\n    // Use original output shape for runData output layout.\r\n    outputLayout.shape = this.outputShape;\r\n    outputLayout.unpackedShape = this.outputShape;\r\n    if (outputLayout === undefined) {\r\n      outputLayout = handler.createTextureLayoutFromShape(\r\n          this.outputShape, 4, this.outputShape, {isPacked: true, reverseWH: true});\r\n    }\r\n    // return run data for reshape. Here, we use the original calculate outputLayout to create the real output layout.\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected outputShape: readonly number[];\r\n  private inputShape3D: [number, number, number];\r\n  private needSqueezeInputData = false;\r\n  private outputLayout: TextureLayout;\r\n}\r\n\r\nfunction processDims3D(shape: readonly number[]|readonly number[]|Tensor.IntegerType): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  const batchDims = shape.length >= 3 ? shape.slice(0, shape.length - 2) : [1];\r\n  let batch = 1;\r\n  for (let i = 0; i < batchDims.length; ++i) {\r\n    batch *= batchDims[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureLayout} from '../types';\r\nimport {getPackedShape} from '../utils';\r\nimport {WebGLReshapePacked} from './reshape-packed';\r\n\r\nexport class WebGLReshape extends Reshape {\r\n  packedImpl: WebGLReshapePacked;\r\n  constructor() {\r\n    super();\r\n    this.packedImpl = new WebGLReshapePacked();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inferenceHandler.session.pack) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n      const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\r\n      return [reshapedTensor];\r\n    }\r\n  }\r\n}\r\n\r\nexport function reshape(\r\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\r\n  let packedShape = reshapedDims;\r\n  if (inputTD.channels === 4) {\r\n    packedShape = getPackedShape(reshapedDims);\r\n  }\r\n  const newTextureLayout: TextureLayout = {\r\n    channels: inputTD.channels,\r\n    height: inputTD.height,\r\n    width: inputTD.width,\r\n    // handle reshaping into scalar Tensors\r\n    shape: packedShape.length !== 0 ? packedShape : [1],\r\n    strides: ShapeUtil.computeStrides(packedShape),\r\n    unpackedShape: reshapedDims,\r\n  };\r\n\r\n  const newTextureData = inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture);\r\n  return newTextureData.tensor;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Upsample} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLResizePacked extends Upsample implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true);\r\n\r\n    const [roi, scales, outputShape] = this.prepareInputs(inputs);\r\n\r\n    const outputLayout =\r\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true});\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    return createResizeProgramInfo(\r\n        glsl, this.mode, inputLayout, outputLayout, scales, roi, this.useExtrapolation, this.extrapolationValue,\r\n        this.cubicCoefficientA, this.excludeOutside, this.coordinateTransformMode);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTD =\r\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type);\r\n    return {inputTextureDatas: [inputTD], outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n\r\n  protected artifacts: Artifact[];\r\n}\r\n\r\nfunction createResizeProgramInfo(\r\n    glsl: Glsl, mode: string, inputLayout: TextureLayout, outputLayout: TextureLayout, scales: readonly number[],\r\n    roi: readonly number[], extrapolationEnabled: boolean, extrapolationValue: number, cubicCoefficientA: number,\r\n    excludeOutside: boolean, coordinateTransformMode: string): ProgramInfo {\r\n  const isSame = scales.every(s => s === 1) && coordinateTransformMode !== 'tf_crop_and_resize';\r\n  if (isSame) {\r\n    return {\r\n      inputLayouts: [inputLayout],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      hasMain: true,\r\n      shaderSource: `void main() {\r\n      vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n      ${glsl.output} = v;\r\n    }`\r\n    };\r\n  }\r\n  const outputShape = outputLayout.unpackedShape;\r\n  const dim = outputShape.length;\r\n  if (dim < 2) {\r\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n  }\r\n\r\n  const outputHeight = outputShape[dim - 2];\r\n  const outputWidth = outputShape[dim - 1];\r\n\r\n  const inputShape = inputLayout.unpackedShape;\r\n  if (dim !== inputShape.length) {\r\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n  }\r\n  const inputHeight = inputShape[dim - 2];\r\n  const inputWidth = inputShape[dim - 1];\r\n\r\n  const scalesHeight = scales[dim - 2];\r\n  const scalesWidth = scales[dim - 1];\r\n\r\n  let getSourceFracIndex = '';\r\n\r\n  if (mode !== 'linear') {\r\n    // TODO: support other modes\r\n    throw new Error(`resize (packed) does not support mode: '${mode}'`);\r\n  }\r\n  switch (coordinateTransformMode) {\r\n    case 'asymmetric':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          return vec4(coords) / scaleWHWH;\r\n        }\r\n    `;\r\n      break;\r\n    case 'half_pixel':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n        }\r\n    `;\r\n      break;\r\n    case 'align_corners':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0, ${\r\n          outputHeight}.0 - 1.0);\r\n          vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0, ${\r\n          inputHeight}.0 - 1.0);\r\n          vec4 new_scale = original / resized;\r\n          return vec4(coords) * new_scale;\r\n        }\r\n      `;\r\n      break;\r\n    default:\r\n      // TODO:supporting other coordinateTransformModes\r\n      throw new Error(`resize (packed) does not support coordinateTransformMode: '${coordinateTransformMode}'`);\r\n  }\r\n\r\n  const coordsDataType = getCoordsDataType(dim);\r\n  const unpackChannel = unpackFromChannel();\r\n  const shader = `\r\n        const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n        const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\r\n        ${unpackChannel}\r\n        ${getSourceFracIndex}\r\n        float getAValue(int x10, int r, int c, int d) {\r\n          return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n        }\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          int batch = rc[0];\r\n          int depth = rc[1];\r\n\r\n          // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n          ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n          // calculate the source index in fraction\r\n          vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n          // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n          ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n          ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n          ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n          ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n          bool hasNextRow = rc.w < ${outputHeight - 1};\r\n          bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n          // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n          vec4 topLeft = vec4(\r\n            getAValue(batch, depth, x00.x, x00.y),\r\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.y)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.y)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n          vec4 topRight = vec4(\r\n            getAValue(batch, depth, x00.x, x00.w),\r\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.w)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.w)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n          vec4 bottomLeft = vec4(\r\n            getAValue(batch, depth, x00.z, x00.y),\r\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.y)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.y)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n          vec4 bottomRight = vec4(\r\n            getAValue(batch, depth, x00.z, x00.w),\r\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.w)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.w)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n          // calculate the interpolation fraction on u and v direction\r\n          vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n          vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n          vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n          vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n          vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n          ${glsl.output} = vec4(newValue);\r\n        }\r\n      `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout,\r\n    samplers: ['A'],\r\n    shaderSource: shader,\r\n    hasMain: true,\r\n    expectPackedInputs: true,\r\n    expectPackedOutputs: true,\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSlice extends Slice implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\r\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\r\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\r\n      throw new Error('dynamic slice attributes are not allowed');\r\n    }\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error('currently non-1 steps is not supported for Slice');\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n\r\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nfunction createProgramInfo(\r\n    handler: WebGLInferenceHandler, x: Tensor, starts: readonly number[], ends: readonly number[],\r\n    axes: readonly number[]): ProgramInfo {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.slice(0).map((val, ind) => ind);\r\n  }\r\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\r\n  });\r\n\r\n  const outputShape = x.dims.slice();\r\n\r\n  const sliceOps: string[] = [];\r\n  for (let i = 0; i < axes.length; i++) {\r\n    outputShape[axes[i]] = ends[i] - starts[i];\r\n    if (starts[i] > 0) {\r\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\r\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\r\n  }\r\n\r\n  const rank = outputShape.length;\r\n  const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n  return {\r\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\r\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['A'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n  return {\r\n    inputTextureDatas: inputTDs,\r\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n    uniformData: {}\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLSoftmax extends Softmax {\r\n  constructor() {\r\n    super();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    // return only the last output\r\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\r\n  }\r\n  createSoftMaxProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\r\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\r\n    const inputShape = input.dims.slice();\r\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n    const outputShape = inputShape;\r\n    const rank = outputShape.length;\r\n    const textureWidth = inputLayout.width;\r\n    const textureHeight = inputLayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\r\n      throw new Error('Dimensionality of the intermediate results should be 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\r\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n    }\r\n\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${D};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max', 'Norm'],\r\n      shaderSource,\r\n      name: 'SoftMax',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a texture that contains the normalization factor for each of the 'N' rows\r\n   */\r\n  createComputScaleProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\r\n      outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error('Dimensionality of the output should be 1');\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error('Shape of the output should be equal to logical row count');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1) {\r\n      throw new Error('Dimensionality of the intermediate results should be 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N) {\r\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      int logical_row_start_offset = indices[0] * ${D};\r\n\r\n      float norm_factor = 0.0;\r\n      float max = _Max(indices);\r\n      for(int i=0; i<${D}; ++i)\r\n      {\r\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight}))) - max);\r\n      }\r\n\r\n      return norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max'],\r\n      shaderSource,\r\n      name: 'ComputScale',\r\n    };\r\n  }\r\n  /**\r\n   * Create a texture that contains the maximum value of each of the 'N' rows\r\n   */\r\n  createComputeMaxProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error('Dimensionality of the output should be 1');\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error('Shape of the output should be equal to logical row count');\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        float process(int[${rank}] indices) {\r\n\r\n          int logical_row_start_offset = indices[0] * ${D};\r\n\r\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\r\n        textureHeight} )));\r\n          for(int i=1; i<${D}; ++i)\r\n          {\r\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight})));\r\n            if(current > max)\r\n              max = current;\r\n          }\r\n\r\n          return max;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xlayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      name: 'ComputeMax',\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\r\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\r\n    const computeScaleProgramInfo =\r\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\r\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\r\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    for (let i = 1; i < programInfos.length; ++i) {\r\n      runDatas.push({\r\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\r\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\r\n        uniformData: {}\r\n      });\r\n    }\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Split} from '../../../ops/split';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLSplit extends Split {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\r\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\r\n      for (let i = 0; i < count; ++i) {\r\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const results: Tensor[] = [];\r\n\r\n    this.artifacts.forEach(artifact => {\r\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\r\n      inferenceHandler.session.programManager.run(artifact, rundata);\r\n      results.push(rundata.outputTextureData.tensor);\r\n    });\r\n    return results;\r\n  }\r\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\r\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\r\n    return offsets.length;\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\r\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\r\n    const offset = offsets[index];\r\n    const outputShape = shapes[index];\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }`;\r\n    return {\r\n      name: 'WebGLSplit',\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLSqueeze extends Squeeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSum extends Sum implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const outputShape = inputs[0].dims.slice();\r\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      shaderSource: `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }`,\r\n      hasMain: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTile extends Tile implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\r\n\r\n    const tileOps: string[] = [];\r\n    for (let i = 0; i < inputShape.length; i++) {\r\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n    float process(int outputIdx[${rank}]) {\r\n      int inputIdx[${rank}];\r\n      ${tileOps.join('\\n')}\r\n      return _A(inputIdx);\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  getOutputShape(inputShapes: Array<readonly number[]>): readonly number[] {\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShapes = inputs.map(t => t.dims.slice());\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\r\n    const rank = inputs[0].dims.length;\r\n    // A dims=[${inputs[0].dims.toString()}]\r\n    // out Dims=[${unpackedOutputShape.toString()}]\r\n    // based on perm=[${perm.toString()}]\r\n    const shaderSource = `\r\n      ${this.getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\r\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\r\n    const outputShape = this.getOutputShape([inputShape]);\r\n    if (!name) {\r\n      name = 'perm';\r\n    }\r\n    return {\r\n      name,\r\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\r\n      type: FunctionType.Positional,\r\n      inputShape,\r\n      outputShape\r\n    };\r\n  }\r\n  protected getAdjustedPerm(inputShape: readonly number[]): number[] {\r\n    let perm = this.perm;\r\n    if (perm && perm.length !== inputShape.length) {\r\n      perm = [...(inputShape.keys())].reverse();\r\n    }\r\n    return perm;\r\n  }\r\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\r\n    const reverseFunc = [];\r\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n    for (let i = 0; i < rank; ++i) {\r\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n    }\r\n    reverseFunc.push('\\t}');\r\n    return reverseFunc.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../types';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    // TODO: remove this special script. Use graph transformer instead.\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = ${glsl.texture2D}(X,TexCoords).r;\r\n        ${glsl.output} = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo =\r\n        {name: 'Uint8Encode', inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\r\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n\r\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\r\n    const texture =\r\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\r\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture);\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.session.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\r\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction) {\r\n    super(typeConstraint);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const inputLayout = handler.session.pack ?\r\n        handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true) :\r\n        handler.getOrCreateTextureLayout(inputs[0]);\r\n\r\n    const outputLayout = handler.session.pack ?\r\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\r\n        handler.createTextureLayoutFromShape(outputShape);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      void main() {\r\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n        v = ${this.glslFunc.name}(v);\r\n        ${glsl.output} = v;\r\n      }\r\n      `;\r\n\r\n    if (handler.session.pack) {\r\n      return {\r\n        inputLayouts: [inputLayout],\r\n        outputLayout,\r\n        samplers: ['A'],\r\n        shaderSource,\r\n        hasMain: true,\r\n        expectPackedInputs: true,\r\n        expectPackedOutputs: true\r\n      };\r\n    } else {\r\n      return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTD = handler.session.pack ?\r\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)) :\r\n        handler.getOrCreateTextureData(inputs[0]);\r\n    return {\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return ${fname}(a);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return ${fname}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLUnpack implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 1) {\r\n      throw new Error('Pack kernel should have input tensor count to 1.');\r\n    }\r\n\r\n    const inputTexture = handler.getTextureData(inputs[0].dataId, true);\r\n    if (!inputTexture) {\r\n      throw new Error('packed input texture must exist');\r\n    }\r\n\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true);\r\n    const isScalar = (inputLayout.unpackedShape.length === 0);\r\n    const outputLayout = handler.createTextureLayoutFromShape(inputTexture.unpackedShape);\r\n    const outputShape = outputLayout.shape;\r\n    const rank = outputShape.length;\r\n\r\n    const channels = getChannels('rc', rank);\r\n    const innerDims = channels.slice(-2);\r\n    const coordsDataType = getCoordsDataType(rank);\r\n    const unpackChannel = unpackFromChannel();\r\n    const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n      // Sample the texture with the coords to get the rgba channel value.\r\n      vec4 packedInput = getA(${sourceCoords});\r\n\r\n      ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n    }\r\n  `;\r\n\r\n    return {\r\n      name: 'WebGLUnpack',\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true)],\r\n      outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: false,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0], true)];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Upsample} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * this.scales[i]));\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    const dim = outputShape.length;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const outputPitches = new Array<number>(dim);\r\n    const inputPitches = new Array<number>(dim);\r\n    let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n    for (let d = dim - 1; d >= 0; d--) {\r\n      outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n      inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n      precalculatedPitches += `\r\n      output_pitches[${d}] = ${outputPitches[d]};\r\n      input_pitches[${d}] = ${inputPitches[d]};\r\n      `;\r\n    }\r\n    const getInputFloatFunction = `\r\n    float getInputFloat(int index) {\r\n      vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n      return value;\r\n    }\r\n    `;\r\n\r\n    const shaderSource = this.mode === 'nearest' ?\r\n        // nearest\r\n        `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[${dim}]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int d, m;\r\n        for (int dim = 0; dim < ${dim}; ++dim) {\r\n          d = output_index / output_pitches[dim];\r\n          m = output_index - d * output_pitches[dim];\r\n          output_index = m;\r\n\r\n          if (scales[dim] != 1 && d > 0) {\r\n            int d2 = d / scales[dim];\r\n            m = d - d2 * scales[dim];\r\n            d = d2;\r\n          }\r\n          input_index += input_pitches[dim] * d;\r\n        }\r\n\r\n        return getInputFloat(input_index);\r\n      }` :\r\n        dim === 4 ?\r\n        // bilinear 4D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[4]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m / output_pitches[1];\r\n        m = m - index_of_dim1 * output_pitches[1];\r\n        index_of_dim2 = m / output_pitches[2];\r\n        m = m - index_of_dim2 * output_pitches[2];\r\n        index_of_dim3 = m;\r\n\r\n        int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n        index_of_input_dim2 = index_of_dim2 / scales[2];\r\n        y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n        index_of_input_dim3 = index_of_dim3 / scales[3];\r\n        x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n        input_index = index_of_dim0 * input_pitches[0] +\r\n                      index_of_dim1 * input_pitches[1] +\r\n                      index_of_input_dim2 * input_pitches[2] +\r\n                      index_of_input_dim3;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim2 = false;\r\n        if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n          // It's the end in dimension 2\r\n          x01 = x00;\r\n          end_of_dim2 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[2]);\r\n        }\r\n\r\n        if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n          // It's the end in dimension 3\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n      }` :\r\n            // bilinear 2D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[2]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m;\r\n\r\n        int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n        index_of_input_dim0 = index_of_dim0 / scales[0];\r\n        y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n        index_of_input_dim1 = index_of_dim1 / scales[1];\r\n        x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n        input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim0 = false;\r\n        if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n          // It's the end in dimension 0\r\n          x01 = x00;\r\n          end_of_dim0 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[0]);\r\n        }\r\n\r\n        if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n          // It's the end in dimension 1\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inputLayout],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n      variables: [{name: 'scales', type: 'int', arrayLength: this.scales.length}]\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {scales: this.scales.map(x => Math.ceil(x))}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, runData: RunData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(runData.outputTextureData);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.doDraw(buildArtifact, runData);\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected doDraw(artifact: Artifact, runData: RunData): void {\r\n    if (runData.draw) {\r\n      Logger.verbose('ProgramManager', 'Custom draw function');\r\n      runData.draw(this.glContext, artifact);\r\n    } else {\r\n      this.glContext.draw();\r\n    }\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1f(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1i(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData, WebGLOperator} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  packOpCache: Map<string, WebGLOperator>;\r\n  unpackOpCache: Map<string, WebGLOperator>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.packOpCache = new Map();\r\n    this.unpackOpCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes, node, graph);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const execNodeFn = async () => {\r\n          const op = thisOp.op;\r\n          if (!op.checkInputs(inputTensors)) {\r\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\r\n          }\r\n\r\n          const result = op.run(inferenceHandler, inputTensors);\r\n\r\n          return result;\r\n        };\r\n\r\n        const outputList = await this.profiler.event('node', thisOp.node.name, execNodeFn);\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      this.graph.getOutputIndices().forEach((outputIndex) => {\r\n        const thisValue = this._values[outputIndex];\r\n        if (thisValue === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        thisValue.data;\r\n        output.push(thisValue);\r\n      });\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, ProtoUtil} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.inputs.length > 1) {\r\n      throw new Error('Node deletion with multiple inputs is not supported. ');\r\n    }\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          node.attributes.set('__internal_activation', 'string', (this._nodes[next[0]].opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport interface Operator {\r\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\r\n  checkInputs(inputs: Tensor[]): boolean;\r\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\n// currently this operator supports ONLY 'test' mode\r\n// inputs/outputs and parameters will reflect that\r\n// the operator implementation only supports test mode\r\nexport abstract class BatchNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n    this.momentum = attributes.getFloat('momentum', 0.9);\r\n    this.spatial = attributes.getInt('spatial', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 5) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n  protected momentum: number;\r\n  protected spatial: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class BinaryOp implements Operator {\r\n  constructor(\r\n      protected typeConstraint: readonly Tensor.DataType[], protected opType?: string,\r\n      protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Clip implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\r\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected min: number;\r\n  protected max: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Concat implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // TODO: Support string concat\r\n    if (inputType === 'string') {\r\n      return false;\r\n    }\r\n\r\n    for (const input of inputs) {\r\n      // make sure types of all inputs match\r\n      if (input.type !== inputType) {\r\n        return false;\r\n      }\r\n\r\n      // make sure the dimensionality of all inputs are the same\r\n      if (input.dims.length !== inputDimensionality) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Conv implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.dilations = attributes.getInts('dilations', [1, 1]);\r\n    this.group = attributes.getInt('group', 1);\r\n    this.kernelShape = attributes.getInts('kernel_shape', []);\r\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n    this.strides = attributes.getInts('strides', [1, 1]);\r\n    this.activation = attributes.getString('__internal_activation', '');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    // Refer to the below link for all input checks\r\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n      return false;\r\n    }\r\n\r\n    // TODO : Need to add support for multi-dimensional conv\r\n    // currently only support 2-dimensional conv\r\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n    const dataChannel = inputs[0].dims[1];\r\n    const filterInChannel = inputs[1].dims[1] * this.group;\r\n    if (dataChannel !== filterInChannel) {\r\n      return false;\r\n    }\r\n\r\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n      return false;\r\n    }\r\n\r\n    const spatialRank = inputs[0].dims.length - 2;\r\n    // wrong dilations dimension\r\n    if (this.dilations.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong strides dimension\r\n    if (this.strides.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong pads dimension\r\n    if (this.pads.length !== spatialRank * 2) {\r\n      return false;\r\n    }\r\n\r\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n    // (the first 2 dims are batch_size and channels)\r\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO : Need to add support for float64\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected dilations: number[];\r\n  protected group: number;\r\n  protected kernelShape: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n  protected activation: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class DepthToSpace implements Operator {\r\n  constructor() {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // processing node attributes\r\n    this.blocksize = attributes.getInt('blocksize');\r\n    if (this.blocksize < 1) {\r\n      throw new Error(`blocksize must be >= 1, but got : ${this.blocksize} for DepthToSpace`);\r\n    }\r\n    this.blocksizeSqr = this.blocksize * this.blocksize;\r\n    this.mode = attributes.getString('mode', 'DCR');\r\n    if (DepthToSpace.supportedModes.indexOf(this.mode) < 0) {\r\n      throw new Error(`unrecognized mode: ${this.mode} for DepthToSpace`);\r\n    }\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // Input has to be a 4-D tensor\r\n    // TODO: Support string depth-to-space.\r\n    if (inputType === 'string' || inputDimensionality !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected blocksize: number;\r\n  protected blocksizeSqr: number;\r\n\r\n  private static readonly supportedModes = ['DCR', 'CRD'];\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Dropout implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.ratio = attributes.getFloat('ratio', 0.5);\r\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected ratio: number;\r\n  protected testMode: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Elu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1.0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Flatten implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    const r = inputs[0].dims.length;\r\n    if (r === 0) {\r\n      return false;  // scalar tensor is not supported\r\n    }\r\n\r\n    if (this.axis < -r || this.axis > r) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gather implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    const tensorRank = inputs[0].dims.length;\r\n    if (tensorRank < 1) {\r\n      return false;\r\n    }\r\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gemm implements Operator {\r\n  constructor(isOptionalC: boolean) {\r\n    this.isOptionalC = isOptionalC;\r\n  }\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.transA = attributes.getInt('transA', 0) !== 0;\r\n    this.transB = attributes.getInt('transB', 0) !== 0;\r\n    this.alpha = attributes.getFloat('alpha', 1);\r\n    this.beta = attributes.getFloat('beta', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs) {\r\n      return false;\r\n    }\r\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n      return false;\r\n    }\r\n    if (!this.isOptionalC && inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    // 'C' can be of dimensionality 1 or 2 only\r\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected transA: boolean;\r\n  protected transB: boolean;\r\n  protected alpha: number;\r\n  protected beta: number;\r\n\r\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ImageScaler implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.scale = attributes.getFloat('scale');\r\n    this.bias = attributes.getFloats('bias');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected scale: number;\r\n  protected bias: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class InstanceNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class LeakyRelu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 0.01);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class MatMul implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.activation = attributes.getString('__internal_activation', '');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  protected activation: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Pad implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'constant');\r\n    this.value = attributes.getFloat('value', 0.0);\r\n    this.pads = attributes.getInts('pads');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected pads: number[];\r\n  protected value: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nclass PoolBase {\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected ceilMode: number;\r\n  protected countIncludePad: boolean;\r\n  protected kernelShape: number[];\r\n  protected strides: number[];\r\n  protected pads: number[];\r\n}\r\n\r\nexport abstract class AveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode'\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n  }\r\n}\r\n\r\nexport abstract class MaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n    this.storageOrder = attributes.getInt('storage_order', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n    if (this.storageOrder !== 0) {\r\n      throw new Error('column major storage order is not yet supported for MaxPool');\r\n    }\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n    }\r\n  }\r\n\r\n  protected storageOrder: number;\r\n}\r\n\r\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ReduceBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes', []);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected keepDims: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Reshape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Slice implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.starts = attributes.getInts('starts');\r\n    this.ends = attributes.getInts('ends');\r\n    this.axes = attributes.getInts('axes', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected ends: number[];\r\n  protected starts: number[];\r\n}\r\n\r\nexport abstract class SliceV10 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Softmax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Split implements Operator {\r\n  constructor(protected numOutputs?: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.split = attributes.getInts('split', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected split: number[];\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Squeeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Sum implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const length = inputs[0].dims.length;\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (length !== inputs[i].dims.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Tile implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Transpose implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.perm = attributes.getInts('perm', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected perm: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class UnaryOp implements Operator {\r\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Unsqueeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Graph} from '../graph';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Upsample implements Operator {\r\n  constructor(protected opset: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute, _node: Graph.Node, _graph: Graph): void {\r\n    this.isResize = (this.opset >= 10);\r\n\r\n    // processing node attributes\r\n    this.mode = attributes.getString('mode', 'nearest');\r\n    if (this.mode !== 'nearest' && this.mode !== 'linear' && (this.opset < 11 || this.mode !== 'cubic')) {\r\n      throw new Error(`unrecognized mode: ${this.mode}`);\r\n    }\r\n\r\n    if (this.opset < 9) {\r\n      this.scales = attributes.getFloats('scales');\r\n      scalesValidataion(this.scales, this.mode, this.isResize);\r\n    }\r\n\r\n    this.extrapolationValue = attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n    this.coordinateTransformMode =\r\n        this.opset > 10 ? attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n    if ([\r\n          'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize',\r\n          'half_pixel'\r\n        ].indexOf(this.coordinateTransformMode) === -1) {\r\n      throw new Error(`coordinate_transform_mode '${this.coordinateTransformMode}' is not supported`);\r\n    }\r\n    this.useExtrapolation = this.needRoiInput = (this.coordinateTransformMode === 'tf_crop_and_resize');\r\n\r\n    this.nearestMode =\r\n        (this.mode === 'nearest' && this.opset >= 11) ? attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(this.nearestMode) === -1) {\r\n      throw new Error(`nearest_mode '${this.nearestMode}' is not supported`);\r\n    }\r\n\r\n    this.cubicCoefficientA = attributes.getFloat('cubic_coeff_a', -0.75);\r\n    this.excludeOutside = attributes.getInt('exclude_outside', 0) !== 0;\r\n    if (this.excludeOutside && this.mode !== 'cubic') {\r\n      throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n    }\r\n\r\n    this.useNearest2xOptimization = (this.opset < 11) ?\r\n        true :\r\n        (this.mode === 'nearest' && this.coordinateTransformMode === 'asymmetric' && this.nearestMode === 'floor');\r\n\r\n    if (this.opset > 10) {\r\n      this.roiInputIdx = 1;\r\n      this.scalesInputIdx = 2;\r\n      this.sizesInputIdx = 3;\r\n    } else if (this.opset === 9) {\r\n      this.scalesInputIdx = 1;\r\n    }\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || (this.opset < 9 && inputs.length !== 1) ||\r\n        (this.opset >= 9 && this.opset < 11 && inputs.length !== 2) ||\r\n        (this.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.scales && inputs[0].dims.length !== this.scales.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected prepareInputs(inputs: Tensor[]): [number[], number[], readonly number[]] {\r\n    const x = inputs[0];\r\n    const xDims = x.dims;\r\n\r\n    // get roi data\r\n    let roi = this.roi;\r\n    if (!roi) {\r\n      if (this.needRoiInput) {\r\n        if (this.roiInputIdx <= 0) {\r\n          throw new Error('Invalid roi input index.');\r\n        }\r\n        roi = parseRoiData(inputs[this.roiInputIdx]);\r\n      } else {\r\n        roi = new Array(xDims.length * 2).fill(0);\r\n      }\r\n    }\r\n\r\n    let scales = this.scales;\r\n    let outputSizes: number[]|undefined;\r\n    if (!scales) {\r\n      const scalesTensor = inputs[this.scalesInputIdx];\r\n      if (scalesTensor && scalesTensor.size !== 0) {\r\n        if (inputs[this.sizesInputIdx]) {\r\n          throw new Error('Only one of scales or sizes must be provided as input.');\r\n        }\r\n        scales = parseScalesData(scalesTensor, this.mode, this.isResize);\r\n      } else {\r\n        const sizesTensor = inputs[this.sizesInputIdx];\r\n        if (!sizesTensor || sizesTensor.size === 0) {\r\n          throw new Error('Either scales or sizes MUST be provided as input.');\r\n        }\r\n\r\n        outputSizes = Array.from(sizesTensor.integerData);\r\n        scales = parseScalesDataFromOutputSize(outputSizes, xDims, this.mode, this.isResize);\r\n      }\r\n    } else {\r\n      if (inputs[this.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n    }\r\n\r\n    const yDims = outputSizes || computeOutputShape(scales, xDims);\r\n\r\n    return [roi, scales, yDims];\r\n  }\r\n\r\n  protected isResize: boolean;\r\n  protected mode: string;\r\n  protected scales: number[];\r\n  protected extrapolationValue: number;\r\n  protected coordinateTransformMode: string;\r\n  protected useExtrapolation: boolean;\r\n  protected needRoiInput: boolean;\r\n  protected nearestMode: string;\r\n  protected cubicCoefficientA: number;\r\n  protected excludeOutside: boolean;\r\n  protected useNearest2xOptimization: boolean;\r\n  protected roiInputIdx: number;\r\n  protected scalesInputIdx: number;\r\n  protected sizesInputIdx: number;\r\n  protected roi: number[];\r\n}\r\n\r\nfunction scalesValidataion(scales: number[], mode: string, isResize: boolean) {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') or 4-D inputs\\\r\nwith the corresponding outermost 2 scale values being 1 in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseRoiData(roi: Tensor): number[] {\r\n  return roi.size > 0 ? Array.from(roi.floatData) : [];\r\n}\r\n\r\nexport function parseScalesData(scale: Tensor, mode: string, isResize: boolean): number[] {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidataion(scales, mode, isResize);\r\n  return scales;\r\n}\r\n\r\nexport function parseScalesDataFromOutputSize(\r\n    yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] {\r\n  const length = xDims.length;\r\n  const scales = new Array<number>(length);\r\n\r\n  for (let i = 0, end = length; i < end; i++) {\r\n    if (xDims[i] === 0) {\r\n      if (yDims[i] !== 0) {\r\n        throw new Error('Input dim is zero but required output dim is non-zero.');\r\n      }\r\n      scales[i] = 1;\r\n    } else {\r\n      scales[i] = yDims[i] / xDims[i];\r\n    }\r\n  }\r\n  scalesValidataion(scales, mode, isResize);\r\n  return scales;\r\n}\r\n\r\nexport function computeOutputShape(scales: readonly number[], inputDims: readonly number[]): number[] {\r\n  return inputDims.map((dim, i) => Math.floor(dim * scales[i]));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  interface OperatorConstructor {\r\n    (node: Graph.Node): Operator;\r\n  }\r\n\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\r\n   */\r\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opConstructor = rule[3];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return opConstructor(node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(Buffer.from(buf), isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\r\n    //      asynchronous way. should implement this function when enabling webgl async read data.\r\n\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\r\n        value.data[i] = buf.toString();\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  static longToNumber(n: Long|flatbuffers.Long|number) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: true}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(\r\n      originalDims: readonly number[], shapeHints: number[]|readonly number[]|Tensor.IntegerType): readonly number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: number[], dilations: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    // TODO: support dilations for pool operators\r\n    const dilations = new Array<number>(kernelShape.length).fill(1);\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {allocWasmString, iterateExtraOptions} from './options-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create run options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\nimport {env, InferenceSession, SessionHandler, Tensor, TypedTensor} from 'onnxruntime-common';\r\n\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nlet ortInit: boolean;\r\n\r\nconst tensorDataTypeStringToEnum = (type: string): onnx.TensorProto.DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return onnx.TensorProto.DataType.INT8;\r\n    case 'uint8':\r\n      return onnx.TensorProto.DataType.UINT8;\r\n    case 'bool':\r\n      return onnx.TensorProto.DataType.BOOL;\r\n    case 'int16':\r\n      return onnx.TensorProto.DataType.INT16;\r\n    case 'uint16':\r\n      return onnx.TensorProto.DataType.UINT16;\r\n    case 'int32':\r\n      return onnx.TensorProto.DataType.INT32;\r\n    case 'uint32':\r\n      return onnx.TensorProto.DataType.UINT32;\r\n    case 'float32':\r\n      return onnx.TensorProto.DataType.FLOAT;\r\n    case 'float64':\r\n      return onnx.TensorProto.DataType.DOUBLE;\r\n    case 'string':\r\n      return onnx.TensorProto.DataType.STRING;\r\n    case 'int64':\r\n      return onnx.TensorProto.DataType.INT64;\r\n    case 'uint64':\r\n      return onnx.TensorProto.DataType.UINT64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\nconst tensorDataTypeEnumToString = (typeProto: onnx.TensorProto.DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return 'int8';\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return 'uint8';\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 'bool';\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 'int16';\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return 'uint16';\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return 'int32';\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 'uint32';\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return 'float32';\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return 'float64';\r\n    case onnx.TensorProto.DataType.STRING:\r\n      return 'string';\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return 'int32';\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 'uint32';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n  }\r\n};\r\n\r\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionHandle: number;\r\n\r\n  inputNames: string[];\r\n  private inputNamesUTF8Encoded: number[];\r\n  outputNames: string[];\r\n  private outputNamesUTF8Encoded: number[];\r\n\r\n  loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): void {\r\n    const wasm = getInstance();\r\n    if (!ortInit) {\r\n      const errorCode = wasm._OrtInit(env.wasm.numThreads!, getLogLevel(env.logLevel!));\r\n      if (errorCode !== 0) {\r\n        throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\r\n      }\r\n      ortInit = true;\r\n    }\r\n\r\n    const modelDataOffset = wasm._malloc(model.byteLength);\r\n    let sessionOptionsHandle = 0;\r\n    let allocs: number[] = [];\r\n\r\n    try {\r\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n      wasm.HEAPU8.set(model, modelDataOffset);\r\n      this.sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\r\n      if (this.sessionHandle === 0) {\r\n        throw new Error('Can\\'t create a session');\r\n      }\r\n    } finally {\r\n      wasm._free(modelDataOffset);\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n      allocs.forEach(wasm._free);\r\n    }\r\n\r\n    const inputCount = wasm._OrtGetInputCount(this.sessionHandle);\r\n    const outputCount = wasm._OrtGetOutputCount(this.sessionHandle);\r\n\r\n    this.inputNames = [];\r\n    this.inputNamesUTF8Encoded = [];\r\n    this.outputNames = [];\r\n    this.outputNamesUTF8Encoded = [];\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const name = wasm._OrtGetInputName(this.sessionHandle, i);\r\n      if (name === 0) {\r\n        throw new Error('Can\\'t get an input name');\r\n      }\r\n      this.inputNamesUTF8Encoded.push(name);\r\n      this.inputNames.push(wasm.UTF8ToString(name));\r\n    }\r\n    for (let i = 0; i < outputCount; i++) {\r\n      const name = wasm._OrtGetOutputName(this.sessionHandle, i);\r\n      if (name === 0) {\r\n        throw new Error('Can\\'t get an output name');\r\n      }\r\n      this.outputNamesUTF8Encoded.push(name);\r\n      this.outputNames.push(wasm.UTF8ToString(name));\r\n    }\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    const wasm = getInstance();\r\n    if (this.inputNamesUTF8Encoded) {\r\n      this.inputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n      this.inputNamesUTF8Encoded = [];\r\n    }\r\n    if (this.outputNamesUTF8Encoded) {\r\n      this.outputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n      this.outputNamesUTF8Encoded = [];\r\n    }\r\n    if (this.sessionHandle) {\r\n      wasm._OrtReleaseSession(this.sessionHandle);\r\n      this.sessionHandle = 0;\r\n    }\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const wasm = getInstance();\r\n\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      if (tensor.type === 'string') {\r\n        // TODO: support string tensor\r\n        throw new TypeError('string tensor is not supported');\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const inputCount = inputIndices.length;\r\n    const outputCount = outputIndices.length;\r\n\r\n    let runOptionsHandle = 0;\r\n    let allocs: number[] = [];\r\n\r\n    const inputValues: number[] = [];\r\n    const inputDataOffsets: number[] = [];\r\n\r\n    try {\r\n      [runOptionsHandle, allocs] = setRunOptions(options);\r\n\r\n      // create input tensors\r\n      for (let i = 0; i < inputCount; i++) {\r\n        const data = inputArray[i].data;\r\n        if (Array.isArray(data)) {\r\n          // string tensor\r\n          throw new TypeError('string tensor is not supported');\r\n        } else {\r\n          const dataOffset = wasm._malloc(data.byteLength);\r\n          inputDataOffsets.push(dataOffset);\r\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength), dataOffset);\r\n\r\n          const dims = inputArray[i].dims;\r\n\r\n          const stack = wasm.stackSave();\r\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n          try {\r\n            let dimIndex = dimsOffset / 4;\r\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n            const tensor = wasm._OrtCreateTensor(\r\n                tensorDataTypeStringToEnum(inputArray[i].type), dataOffset, data.byteLength, dimsOffset, dims.length);\r\n            if (tensor === 0) {\r\n              throw new Error('Can\\'t create a tensor');\r\n            }\r\n            inputValues.push(tensor);\r\n          } finally {\r\n            wasm.stackRestore(stack);\r\n          }\r\n        }\r\n      }\r\n\r\n      const beforeRunStack = wasm.stackSave();\r\n      const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n      const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n      const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n      const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n      try {\r\n        let inputValuesIndex = inputValuesOffset / 4;\r\n        let inputNamesIndex = inputNamesOffset / 4;\r\n        let outputValuesIndex = outputValuesOffset / 4;\r\n        let outputNamesIndex = outputNamesOffset / 4;\r\n        for (let i = 0; i < inputCount; i++) {\r\n          wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n          wasm.HEAPU32[inputNamesIndex++] = this.inputNamesUTF8Encoded[inputIndices[i]];\r\n        }\r\n        for (let i = 0; i < outputCount; i++) {\r\n          wasm.HEAPU32[outputValuesIndex++] = 0;\r\n          wasm.HEAPU32[outputNamesIndex++] = this.outputNamesUTF8Encoded[outputIndices[i]];\r\n        }\r\n\r\n        // support RunOptions\r\n        let errorCode = wasm._OrtRun(\r\n            this.sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n            outputValuesOffset, runOptionsHandle);\r\n\r\n        const output: {[name: string]: Tensor} = {};\r\n\r\n        if (errorCode === 0) {\r\n          for (let i = 0; i < outputCount; i++) {\r\n            const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n            const beforeGetTensorDataStack = wasm.stackSave();\r\n            // stack allocate 4 pointer value\r\n            const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n            try {\r\n              errorCode = wasm._OrtGetTensorData(\r\n                  tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n              if (errorCode !== 0) {\r\n                throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\r\n              }\r\n              let tensorDataIndex = tensorDataOffset / 4;\r\n              const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n              const dataOffset: number = wasm.HEAPU32[tensorDataIndex++];\r\n              const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n              const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n              const dims = [];\r\n              for (let i = 0; i < dimsLength; i++) {\r\n                dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n              }\r\n              wasm._OrtFree(dimsOffset);\r\n\r\n              const type = tensorDataTypeEnumToString(dataType);\r\n              if (type === 'string') {\r\n                // string tensor\r\n                throw new TypeError('string tensor is not supported');\r\n              } else {\r\n                const typedArray = numericTensorTypeToTypedArray(type);\r\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n                const t = new Tensor(type, new typedArray(size), dims) as TypedTensor<Exclude<Tensor.Type, 'string'>>;\r\n                new Uint8Array(t.data.buffer, t.data.byteOffset, t.data.byteLength)\r\n                    .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + t.data.byteLength));\r\n                output[this.outputNames[outputIndices[i]]] = t;\r\n              }\r\n            } finally {\r\n              wasm.stackRestore(beforeGetTensorDataStack);\r\n              wasm._OrtReleaseTensor(tensor);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (errorCode === 0) {\r\n          return output;\r\n        } else {\r\n          throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\r\n        }\r\n      } finally {\r\n        wasm.stackRestore(beforeRunStack);\r\n      }\r\n    } finally {\r\n      inputValues.forEach(wasm._OrtReleaseTensor);\r\n      inputDataOffsets.forEach(wasm._free);\r\n\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n      allocs.forEach(wasm._free);\r\n    }\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {allocWasmString, iterateExtraOptions} from './options-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n\r\n  try {\r\n    if (options?.graphOptimizationLevel === undefined) {\r\n      sessionOptions.graphOptimizationLevel = 'all';\r\n    }\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\r\n\r\n    if (options?.enableCpuMemArena === undefined) {\r\n      sessionOptions.enableCpuMemArena = true;\r\n    }\r\n\r\n    if (options?.enableMemPattern === undefined) {\r\n      sessionOptions.enableMemPattern = true;\r\n    }\r\n\r\n    if (options?.executionMode === undefined) {\r\n      sessionOptions.executionMode = 'sequential';\r\n    }\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\r\n\r\n    let logIdDataOffset = 0;\r\n    if (options?.logId !== undefined) {\r\n      logIdDataOffset = allocWasmString(options.logId, allocs);\r\n    }\r\n\r\n    if (options?.logSeverityLevel === undefined) {\r\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    // TODO: Support profiling\r\n    sessionOptions.enableProfiling = false;\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\r\n        sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\r\n        sessionOptions.logVerbosityLevel!);\r\n    if (sessionOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create session options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\nimport ortWasmFactoryThreaded from './binding/ort-wasm-threaded.js';\r\nimport ortWasmFactory from './binding/ort-wasm.js';\r\n\r\nlet wasm: OrtWasmModule;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = env.wasm.initTimeout!;\r\n  const numThreads = env.wasm.numThreads!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {};\r\n\r\n    if (useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode =\r\n            `var ortWasmThreaded=(function(){var _scriptDir;return ${ortWasmFactoryThreaded.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n        config.locateFile = (fileName: string, scriptDirectory: string) => {\r\n          if (fileName.endsWith('.worker.js')) {\r\n            return URL.createObjectURL(new Blob(\r\n                [\r\n                  // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                  // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                  require('./binding/ort-wasm-threaded.worker.js')\r\n                ],\r\n                {type: 'text/javascript'}));\r\n          }\r\n          return scriptDirectory + fileName;\r\n        };\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}